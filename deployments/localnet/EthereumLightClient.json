{
  "address": "0xB75DA069E82064e0c9895b11F571aD99FDFd231D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "receiptsHash",
          "type": "bytes32"
        }
      ],
      "name": "VerifyReceiptsHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rlpHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[4][64]",
          "name": "cache",
          "type": "bytes32[4][64]"
        },
        {
          "internalType": "bytes32[][64]",
          "name": "proofs",
          "type": "bytes32[][64]"
        }
      ],
      "name": "addBlockHeader",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockExisting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockHeightMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "parentHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stateRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transactionsRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receiptsRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blocksByHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blocksByHeightExisting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalityConfirms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "finalizedBlocks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockHeightMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "name": "getReceiptRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "name": "getStateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "name": "getTxRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rlpHeader",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "longestBranchHead",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verifiedBlocks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "number",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[4][64]",
          "name": "cache",
          "type": "bytes32[4][64]"
        },
        {
          "internalType": "bytes32[][64]",
          "name": "proofs",
          "type": "bytes32[][64]"
        },
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mixHash",
          "type": "uint256"
        }
      ],
      "name": "verifyEthash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd7ddafcf41a50e63ee1e283e738f0b5ba7867aa0bcb75a3a1520388d50e2e0c",
  "receipt": {
    "to": null,
    "from": "0xA5241513DA9F4463F1d4874b548dFBAC29D91f34",
    "contractAddress": "0xB75DA069E82064e0c9895b11F571aD99FDFd231D",
    "transactionIndex": 0,
    "gasUsed": "3683971",
    "logsBloom": "0x
    "blockHash": "0x398487631601499da53fee675b91eec19ec92e490eb38f0f69b34f1848650414",
    "transactionHash": "0xbd7ddafcf41a50e63ee1e283e738f0b5ba7867aa0bcb75a3a1520388d50e2e0c",
    "logs": [],
    "blockNumber": 7580,
    "cumulativeGasUsed": "3683971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc8fd11819344e226bcba417eabab7ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"receiptsHash\",\"type\":\"bytes32\"}],\"name\":\"VerifyReceiptsHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[4][64]\",\"name\":\"cache\",\"type\":\"bytes32[4][64]\"},{\"internalType\":\"bytes32[][64]\",\"name\":\"proofs\",\"type\":\"bytes32[][64]\"}],\"name\":\"addBlockHeader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockExisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockHeightMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parentHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stateRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionsRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiptsRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocksByHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocksByHeightExisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalityConfirms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finalizedBlocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockHeightMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getReceiptRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getTxRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rlpHeader\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"longestBranchHead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiedBlocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[4][64]\",\"name\":\"cache\",\"type\":\"bytes32[4][64]\"},{\"internalType\":\"bytes32[][64]\",\"name\":\"proofs\",\"type\":\"bytes32[][64]\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mixHash\",\"type\":\"uint256\"}],\"name\":\"verifyEthash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"title\":\"Ethereum light client\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthereumLightClient.sol\":\"EthereumLightClient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7adeb6058a53a8779699d618eee2ccca5cdc1cc601d423e61e5a7bbc279a29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/EthereumLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./EthereumParser.sol\\\";\\nimport \\\"./lib/EthUtils.sol\\\";\\nimport \\\"./ethash/ethash.sol\\\";\\n\\n/// @title Ethereum light client\\ncontract EthereumLightClient is Ethash, Initializable, PausableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    \\n    struct StoredBlockHeader {\\n        uint256 parentHash;\\n        uint256 stateRoot;\\n        uint256 transactionsRoot;\\n        uint256 receiptsRoot;\\n        uint256 number;\\n        uint256 difficulty;\\n        uint256 time;\\n        uint256 hash;\\n    }\\n\\n    struct HeaderInfo {\\n        uint256 total_difficulty;\\n        bytes32 parent_hash;\\n        uint64 number;\\n    }\\n\\n    // The first block header hash\\n    uint256 public firstBlock;\\n\\n    // Blocks data, in the form: blockHeaderHash => BlockHeader\\n    mapping(uint256 => StoredBlockHeader) public blocks;\\n\\n    // Block existing map, in the form: blockHeaderHash => bool\\n    mapping(uint256 => bool) public blockExisting;\\n\\n    // Blocks in 'Verified' state\\n    mapping(uint256 => bool) public verifiedBlocks;\\n\\n    // Blocks in 'Finalized' state\\n    mapping(uint256 => bool) public finalizedBlocks;\\n\\n    // Valid relayed blocks for a block height, in the form: blockNumber => blockHeaderHash[]\\n    mapping(uint256 => uint256[]) public blocksByHeight;\\n\\n    // Block height existing map, in the form: blockNumber => bool\\n    mapping(uint256 => bool) public blocksByHeightExisting;\\n\\n    // Max block height stored\\n    uint256 public blockHeightMax;\\n\\n    // Block header hash that points to longest chain head\\n    // (please note that 'longest' chain is based on total difficulty)\\n    // uint public longestChainHead;\\n\\n    // Longest branch head of each checkpoint, in the form: (checkpoint block hash) => (head block hash)\\n    // (note that 'longest branch' means the branch which has biggest cumulative difficulty from checkpoint)\\n    mapping(uint256 => uint256) public longestBranchHead;\\n\\n    uint256 private constant DEFAULT_FINALITY_CONFIRMS = 13;\\n\\n    uint256 public finalityConfirms;\\n\\n    function initialize(bytes memory _rlpHeader) external initializer {\\n        finalityConfirms = DEFAULT_FINALITY_CONFIRMS;\\n\\n        uint256 blockHash = EthereumParser.calcBlockHeaderHash(_rlpHeader);\\n        // Parse rlp-encoded block header into structure\\n        EthereumParser.BlockHeader memory header = EthereumParser\\n            .parseBlockHeader(_rlpHeader);\\n        // Save block header info\\n        StoredBlockHeader memory storedBlock = StoredBlockHeader({\\n            parentHash: header.parentHash,\\n            stateRoot: header.stateRoot,\\n            transactionsRoot: header.transactionsRoot,\\n            receiptsRoot: header.receiptsRoot,\\n            number: header.number,\\n            difficulty: header.difficulty,\\n            time: header.timestamp,\\n            hash: blockHash\\n        });\\n        _setFirstBlock(storedBlock);\\n    }\\n\\n    //uint32 constant loopAccesses = 64;      // Number of accesses in hashimoto loop\\n    function addBlockHeader(\\n        bytes memory _rlpHeader,\\n        bytes32[4][loopAccesses] memory cache,\\n        bytes32[][loopAccesses] memory proofs\\n    ) public whenNotPaused returns (bool) {\\n        // Calculate block header hash\\n        uint256 blockHash = EthereumParser.calcBlockHeaderHash(_rlpHeader);\\n        // Check block existing\\n        require(\\n            !blockExisting[blockHash],\\n            \\\"Relay block failed: block already relayed\\\"\\n        );\\n\\n        // Parse rlp-encoded block header into structure\\n        EthereumParser.BlockHeader memory header = EthereumParser\\n            .parseBlockHeader(_rlpHeader);\\n\\n        // Check the existence of parent block\\n        require(\\n            blockExisting[header.parentHash],\\n            \\\"Relay block failed: parent block not relayed yet\\\"\\n        );\\n\\n        // Check block height\\n        require(\\n            header.number == blocks[header.parentHash].number.add(1),\\n            \\\"Relay block failed: invalid block blockHeightMax\\\"\\n        );\\n\\n        // Check timestamp\\n        require(\\n            header.timestamp > blocks[header.parentHash].time,\\n            \\\"Relay block failed: invalid timestamp\\\"\\n        );\\n\\n        // Check difficulty\\n        require(\\n            _checkDiffValidity(\\n                header.difficulty,\\n                blocks[header.parentHash].difficulty\\n            ),\\n            \\\"Relay block failed: invalid difficulty\\\"\\n        );\\n\\n        // Verify block PoW\\n        uint256 sealHash = EthereumParser.calcBlockSealHash(_rlpHeader);\\n        bool rVerified = verifyEthash(\\n            bytes32(sealHash),\\n            uint64(header.nonce),\\n            uint64(header.number),\\n            cache,\\n            proofs,\\n            header.difficulty,\\n            header.mixHash\\n        );\\n        require(rVerified, \\\"Relay block failed: invalid PoW\\\");\\n\\n        // Save block header info\\n        StoredBlockHeader memory storedBlock = StoredBlockHeader({\\n            parentHash: header.parentHash,\\n            stateRoot: header.stateRoot,\\n            transactionsRoot: header.transactionsRoot,\\n            receiptsRoot: header.receiptsRoot,\\n            number: header.number,\\n            difficulty: header.difficulty,\\n            time: header.timestamp,\\n            hash: blockHash\\n        });\\n\\n        blocks[blockHash] = storedBlock;\\n        blockExisting[blockHash] = true;\\n        // verifiedBlocks[blockHash] = true;\\n\\n        blocksByHeight[header.number].push(blockHash);\\n        blocksByHeightExisting[header.number] = true;\\n\\n        if (header.number > blockHeightMax) {\\n            blockHeightMax = header.number;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getBlockHeightMax() public view returns (uint256) {\\n        return blockHeightMax;\\n    }\\n\\n    function getStateRoot(bytes32 blockHash) public view returns (bytes32) {\\n        return bytes32(blocks[uint256(blockHash)].stateRoot);\\n    }\\n\\n    function getTxRoot(bytes32 blockHash) public view returns (bytes32) {\\n        return bytes32(blocks[uint256(blockHash)].transactionsRoot);\\n    }\\n\\n    function getReceiptRoot(bytes32 blockHash) public view returns (bytes32) {\\n        return bytes32(blocks[uint256(blockHash)].receiptsRoot);\\n    }\\n\\n    function VerifyReceiptsHash(bytes32 blockHash, bytes32 receiptsHash)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return bytes32(blocks[uint256(blockHash)].receiptsRoot) == receiptsHash;\\n    }\\n\\n    // Check the difficulty of block is valid or not\\n    // (the block difficulty adjustment is described here: https://github.com/ethereum/EIPs/issues/100)\\n    // Note that this is only 'minimal check' because we do not have 'block uncles' information to calculate exactly.\\n    // 'Minimal check' is enough to prevent someone from spamming relaying blocks with quite small difficulties\\n    function _checkDiffValidity(uint256 diff, uint256 parentDiff)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return diff >= parentDiff.sub((parentDiff / 10000) * 99);\\n    }\\n\\n    function _setFirstBlock(StoredBlockHeader memory toSetBlock) private {\\n        firstBlock = toSetBlock.hash;\\n\\n        blocks[toSetBlock.hash] = toSetBlock;\\n        blockExisting[toSetBlock.hash] = true;\\n\\n        verifiedBlocks[toSetBlock.hash] = true;\\n        finalizedBlocks[toSetBlock.hash] = true;\\n\\n        blocksByHeight[toSetBlock.number].push(toSetBlock.hash);\\n        blocksByHeightExisting[toSetBlock.number] = true;\\n\\n        blockHeightMax = toSetBlock.number;\\n\\n        longestBranchHead[toSetBlock.hash] = toSetBlock.hash;\\n    }\\n}\\n\",\"keccak256\":\"0xa42f1007ed5dc73d0df5a694f6dbaf4efd2a3648980a53919a9a07b137e51a39\",\"license\":\"UNLICENSED\"},\"contracts/EthereumParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Created on 2019-12-28\\n * @summary: The EthCommon library contains common structures / functions\\n * @author: Tuan Vu (tuanvd@gmail.com)\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\nimport \\\"./lib/RLPEncode.sol\\\";\\n\\nlibrary EthereumParser {\\n    using RLPReader for bytes;\\n    using RLPReader for uint256;\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for RLPReader.Iterator;\\n\\n    using RLPEncode for bytes;\\n    using RLPEncode for bytes[];\\n\\n    struct BlockHeader {\\n        uint256 parentHash;\\n        uint256 sha3Uncles;\\n        address miner;\\n        uint256 stateRoot;\\n        uint256 transactionsRoot;\\n        uint256 receiptsRoot;\\n        bytes logsBloom;\\n        uint256 difficulty;\\n        uint256 number;\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 timestamp;\\n        bytes extraData;\\n        uint256 mixHash;\\n        uint256 nonce;\\n        uint256 baseFeePerGas;\\n    }\\n\\n    /**\\n     * Parse RLP-encoded block header into BlockHeader data structure\\n     *  @param _rlpHeader: RLP-encoded block header with data fields order as defined in the BlockHeader struct\\n     **/\\n    function parseBlockHeader(bytes memory _rlpHeader)\\n        internal\\n        pure\\n        returns (BlockHeader memory header)\\n    {\\n        RLPReader.Iterator memory it = _rlpHeader.toRlpItem().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) header.parentHash = it.next().toUint();\\n            else if (idx == 1) header.sha3Uncles = it.next().toUint();\\n            else if (idx == 2) header.miner = it.next().toAddress();\\n            else if (idx == 3) header.stateRoot = it.next().toUint();\\n            else if (idx == 4) header.transactionsRoot = it.next().toUint();\\n            else if (idx == 5) header.receiptsRoot = it.next().toUint();\\n            else if (idx == 6) header.logsBloom = it.next().toBytes();\\n            else if (idx == 7) header.difficulty = it.next().toUint();\\n            else if (idx == 8) header.number = it.next().toUint();\\n            else if (idx == 9) header.gasLimit = it.next().toUint();\\n            else if (idx == 10) header.gasUsed = it.next().toUint();\\n            else if (idx == 11) header.timestamp = it.next().toUint();\\n            else if (idx == 12) header.extraData = it.next().toBytes();\\n            else if (idx == 13) header.mixHash = it.next().toUint();\\n            else if (idx == 14) header.nonce = it.next().toUint();\\n            else if (idx == 15) header.baseFeePerGas = it.next().toUint();\\n            else it.next();\\n\\n            idx++;\\n        }\\n        return header;\\n    }\\n\\n    function calcBlockHeaderHash(bytes memory _rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(_rlpHeader));\\n    }\\n\\n    function calcBlockSealHash(bytes memory _rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        bytes[] memory rlpFields = new bytes[](14);\\n        RLPReader.Iterator memory it = _rlpHeader.toRlpItem().iterator();\\n        uint256 idx = 0;\\n        while (it.hasNext() && idx < 14) {\\n            if (idx == 13) {\\n                it.next();\\n                it.next();\\n            }\\n            rlpFields[idx] = it.next().toRlpBytes();\\n            idx++;\\n        }\\n\\n        bytes memory toSealRlpData = rlpFields.encodeList();\\n        return uint256(keccak256(toSealRlpData));\\n    }\\n\\n    struct Transaction {\\n        uint256 nonce;\\n        uint256 gasPrice;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes input;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @param _rlpTx: RLP-encoded tx with data fields order as defined in the Tx struct\\n     **/\\n    function parseTx(bytes memory _rlpTx)\\n        internal\\n        pure\\n        returns (Transaction memory trans)\\n    {\\n        RLPReader.Iterator memory it = _rlpTx.toRlpItem().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) trans.nonce = it.next().toUint();\\n            else if (idx == 1) trans.gasPrice = it.next().toUint();\\n            else if (idx == 2) trans.gas = it.next().toUint();\\n            else if (idx == 3) trans.to = it.next().toAddress();\\n            else if (idx == 4) trans.value = it.next().toUint();\\n            else if (idx == 5) trans.input = it.next().toBytes();\\n            else if (idx == 6) trans.v = uint8(it.next().toUint());\\n            else if (idx == 7) trans.r = it.next().toBytes32();\\n            else if (idx == 8) trans.s = it.next().toBytes32();\\n            else it.next();\\n            idx++;\\n        }\\n        return trans;\\n    }\\n}\\n\",\"keccak256\":\"0xa49e7a57c5d72e5112783b1b93d4cbf1bf33f9ec52f6e0337cb163efe86dde4e\",\"license\":\"UNLICENSED\"},\"contracts/ethash/MerkelRoot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract MerkelRoots {\\n    uint64 constant epochStart = 404;\\n    uint64 constant epochEnd = 404;\\n    bytes constant ROOTS = \\\"\\\\xeb\\\\xe5\\\\x0d\\\\xbd\\\\x91\\\\x67\\\\x46\\\\xb5\\\\x6e\\\\x58\\\\x86\\\\x9e\\\\x26\\\\x48\\\\x5d\\\\x14\\\\x0f\\\\x92\\\\x86\\\\x6d\\\\x59\\\\xfb\\\\xb8\\\\x94\\\\x40\\\\x5d\\\\x8c\\\\x7e\\\\xf0\\\\x7b\\\\x10\\\\x86\\\";\\n\\n   function getRootHash(uint64 epoch) internal pure returns(bytes32 hash) {\\n       bytes memory roots = ROOTS;\\n       require(epoch >= epochStart && epoch <= epochEnd, \\\"epoch out of range!\\\");\\n       uint256 index = epoch - epochStart + 1; // skip length\\n       assembly{\\n           hash := mload(add(roots, mul(index, 0x20)))\\n       }\\n   }\\n}\",\"keccak256\":\"0x3a24fdb008e080407747bd4a1621d58d8f05625a45c26b03b8d41c0885a497c2\",\"license\":\"UNLICENSED\"},\"contracts/ethash/Prime.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// from https://gist.github.com/lhartikk/c7bbc120aa8e58a0e0e781edb9a90497\\nlibrary Prime {\\n    // miller rabin test\\n    function probablyPrime(uint256 n, uint256 prime)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (n == 2 || n == 3) {\\n            return true;\\n        }\\n\\n        if (n % 2 == 0 || n < 2) {\\n            return false;\\n        }\\n\\n        uint256[2] memory values = getValues(n);\\n        uint256 s = values[0];\\n        uint256 d = values[1];\\n\\n        uint256 x = fastModularExponentiation(prime, d, n);\\n\\n        if (x == 1 || x == n - 1) {\\n            return true;\\n        }\\n\\n        for (uint256 i = s - 1; i > 0; i--) {\\n            x = fastModularExponentiation(x, 2, n);\\n            if (x == 1) {\\n                return false;\\n            }\\n            if (x == n - 1) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function fastModularExponentiation(\\n        uint256 a,\\n        uint256 b,\\n        uint256 n\\n    ) internal pure returns (uint256) {\\n        a = a % n;\\n        uint256 result = 1;\\n        uint256 x = a;\\n\\n        while (b > 0) {\\n            uint256 leastSignificantBit = b % 2;\\n            b = b / 2;\\n\\n            if (leastSignificantBit == 1) {\\n                result = result * x;\\n                result = result % n;\\n            }\\n            x = mul(x, x);\\n            x = x % n;\\n        }\\n        return result;\\n    }\\n\\n    // Write (n - 1) as 2^s * d\\n    function getValues(uint256 n) internal pure returns (uint256[2] memory) {\\n        uint256 s = 0;\\n        uint256 d = n - 1;\\n        while (d % 2 == 0) {\\n            d = d / 2;\\n            s++;\\n        }\\n        uint256[2] memory ret;\\n        ret[0] = s;\\n        ret[1] = d;\\n        return ret;\\n    }\\n\\n    // copied from openzeppelin\\n    // https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xa25f0369aa7b3ba489c6ef0d863539b444e602e719d39d5e24fb12a1cd06680f\",\"license\":\"UNLICENSED\"},\"contracts/ethash/binary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LittleEndian {\\n    using LittleEndian for bytes;\\n\\n    function reverse(uint32 num) internal pure returns (uint32) {\\n        return\\n            (num >> 24) |\\n            ((num >> 8) & 0xff00) |\\n            ((num << 8) & 0xff0000) |\\n            ((num << 24) & 0xff000000);\\n    }\\n\\n    function PutUint32(\\n        bytes memory dst,\\n        uint32 offset,\\n        uint32 data\\n    ) internal pure {\\n        assembly {\\n            let memPtr := add(dst, add(offset, 0x20))\\n            mstore8(memPtr, data)\\n            mstore8(add(memPtr, 1), shr(8, data))\\n            mstore8(add(memPtr, 2), shr(16, data))\\n            mstore8(add(memPtr, 3), shr(24, data))\\n        }\\n        /*\\n        dst[offset] = byte(uint8(data));\\n        dst[offset+1] = byte(uint8(data>>8));\\n        dst[offset+2] = byte(uint8(data>>16));\\n        dst[offset+3] = byte(uint8(data>>24));*/\\n    }\\n\\n    function Uint32(bytes memory src, uint32 offset)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        uint256 num;\\n        assembly {\\n            let memPtr := add(src, add(offset, 0x4)) // offset + 0x20 - (32-4)\\n            num := mload(memPtr)\\n        }\\n        return reverse(uint32(num));\\n        //return uint32(uint8(src[offset+3]))<<24 | uint32(uint8(src[offset+2]))<<16 | uint32(uint8(src[offset+1]))<<8 | uint32(uint8(src[offset]));\\n    }\\n\\n    function PutUint64(\\n        bytes memory dst,\\n        uint32 offset,\\n        uint64 data\\n    ) internal pure {\\n        dst.PutUint32(offset + 0, uint32(data));\\n        dst.PutUint32(offset + 4, uint32(data >> 32));\\n    }\\n\\n    function copyBytes32(\\n        bytes memory dst,\\n        uint32 offset,\\n        bytes32 data\\n    ) internal pure {\\n        assembly {\\n            let memPtr := add(dst, add(offset, 0x20))\\n            mstore(memPtr, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3a1476c6271cb11a6d6c319bbfae02b707f1ea07a75c611f4e00ee43b49f9d\",\"license\":\"UNLICENSED\"},\"contracts/ethash/ethash.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./binary.sol\\\";\\nimport \\\"./keccak512.sol\\\";\\nimport \\\"./Prime.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\nimport \\\"./MerkelRoot.sol\\\"; // npm run merkelInit\\n\\ncontract Ethash is MerkelRoots {\\n    using LittleEndian for bytes;\\n    using Keccak512 for bytes;\\n    using Prime for uint256;\\n\\n    uint32 constant hashWords = 16;\\n    uint32 constant hashBytes = 64;\\n    uint32 constant datasetParents = 256;\\n    uint32 constant mixBytes = 128; // Width of mix\\n    uint32 constant loopAccesses = 64; // Number of accesses in hashimoto loop\\n    uint256 constant MAX256 =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    uint256 constant DATASET_BYTES_INIT = 1073741824;\\n    uint256 constant DATASET_BYTES_GROWTH = 8388608; // 2 ^ 23\\n    uint256 constant EPOCH_LENGTH = 30000;\\n\\n    function getFullSize(uint256 epoc) private pure returns (uint256) {\\n        uint256 sz = DATASET_BYTES_INIT + (DATASET_BYTES_GROWTH) * epoc;\\n        sz -= mixBytes;\\n        while (!(sz / mixBytes).probablyPrime(2)) {\\n            sz -= 2 * mixBytes;\\n        }\\n        return sz;\\n    }\\n\\n    // fnv is an algorithm inspired by the FNV hash, which in some cases is used as\\n    // a non-associative substitute for XOR. Note that we multiply the prime with\\n    // the full 32-bit input, in contrast with the FNV-1 spec which multiplies the\\n    // prime with one byte (octet) in turn.\\n    function fnv(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return (a * 0x01000193) ^ b;\\n    }\\n\\n    // fnvHash mixes in data into mix using the ethash fnv method.\\n    function fnvHash32(uint32[] memory mix, uint32[] memory data)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            let mixOffset := add(mix, 0x20)\\n            let mixValue := mload(mixOffset)\\n            let dataOffset := add(data, 0x20)\\n            let dataValue := mload(dataOffset)\\n\\n            // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n            let fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 2\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 3\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 4\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 5\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 6\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 7\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 2\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 3\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 4\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 5\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 6\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 7\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n        }\\n    }\\n\\n    // hashimoto aggregates data from the full dataset in order to produce our final\\n    // value for a particular header hash and nonce.\\n    function hashimoto(\\n        bytes32 hash,\\n        uint64 nonce,\\n        uint64 size,\\n        bytes32[4][loopAccesses] memory cache,\\n        bytes32 rootHash,\\n        bytes32[][loopAccesses] memory proofs\\n    ) private pure returns (bytes32, bytes32) {\\n        // Calculate the number of theoretical rows (we use one buffer nonetheless)\\n        uint32 rows = uint32(size / mixBytes);\\n\\n        // Combine header+nonce into a 64 byte seed\\n        bytes memory seed = new bytes(40);\\n        seed.copyBytes32(0, hash);\\n        seed.PutUint64(32, nonce);\\n\\n        seed = seed.sha3_512();\\n        uint32 seedHead = seed.Uint32(0);\\n\\n        // Start the mix with replicated seed\\n        uint32[] memory mix = new uint32[](mixBytes / 4);\\n        for (uint32 i = 0; i < mix.length; i++) {\\n            mix[i] = seed.Uint32((i % 16) * 4);\\n        }\\n        // Mix in random dataset nodes\\n        uint32[] memory temp = new uint32[](mix.length);\\n\\n        bytes32 root = rootHash;\\n        for (uint32 i = 0; i < loopAccesses; i++) {\\n            uint32 parent = fnv(i ^ seedHead, mix[i % mix.length]) % rows;\\n            //bytes32[4] memory dag = cache[2*parent];\\n            bytes32[4] memory dag = cache[i];\\n            uint256 dagIndex = 2 * parent;\\n            bytes32[] memory proof = proofs[i];\\n            bytes32 leafHash = keccak256(abi.encodePacked(dagIndex, dag));\\n            MerkleProofUpgradeable.verify(proof, root, leafHash);\\n            for (uint32 j = 0; j < dag.length; j++) {\\n                uint32 k = j * 8;\\n                uint256 data = uint256(dag[j]);\\n                temp[k] = LittleEndian.reverse(uint32(data >> (7 * 32)));\\n                temp[k + 1] = LittleEndian.reverse(uint32(data >> (6 * 32)));\\n                temp[k + 2] = LittleEndian.reverse(uint32(data >> (5 * 32)));\\n                temp[k + 3] = LittleEndian.reverse(uint32(data >> (4 * 32)));\\n                temp[k + 4] = LittleEndian.reverse(uint32(data >> (3 * 32)));\\n                temp[k + 5] = LittleEndian.reverse(uint32(data >> (2 * 32)));\\n                temp[k + 6] = LittleEndian.reverse(uint32(data >> (1 * 32)));\\n                temp[k + 7] = LittleEndian.reverse(uint32(data >> (0 * 32)));\\n            }\\n            fnvHash32(mix, temp);\\n        }\\n\\n        // Compress mix\\n        for (uint32 i = 0; i < mix.length; i += 4) {\\n            mix[i / 4] = fnv(\\n                fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]),\\n                mix[i + 3]\\n            );\\n        }\\n        //mix = mix[:len(mix)/4];\\n        uint256 digest = 0;\\n        for (uint32 i = 0; i < mix.length / 4; i++) {\\n            //binary.LittleEndian.PutUint32(digest[i*4:], val)\\n            digest <<= 32;\\n            uint32 val = mix[i];\\n            digest |= uint256(\\n                ((val & 0xff) << 24) |\\n                    (((val >> 8) & 0xff) << 16) |\\n                    (((val >> 16) & 0xff) << 8) |\\n                    (val >> 24)\\n            );\\n        }\\n        return (bytes32(digest), keccak256(abi.encodePacked(seed, digest)));\\n    }\\n\\n    function verifyEthash(\\n        bytes32 hash,\\n        uint64 nonce,\\n        uint64 number,\\n        bytes32[4][loopAccesses] memory cache,\\n        bytes32[][loopAccesses] memory proofs,\\n        uint256 difficulty,\\n        uint256 mixHash\\n    ) public pure returns (bool) {\\n        uint256 epoch = number / EPOCH_LENGTH;\\n        bytes32 rootHash = getRootHash(uint64(epoch));\\n        uint256 size = getFullSize(epoch);\\n        (bytes32 mix, bytes32 _diff) = hashimoto(\\n            hash,\\n            nonce,\\n            uint64(size),\\n            cache,\\n            rootHash,\\n            proofs\\n        );\\n        uint256 target = MAX256 / difficulty; // target = (2**256)/difficult;\\n        target += ((MAX256 % difficulty) + 1) / difficulty;\\n        return\\n            mix == bytes32(mixHash) &&\\n            difficulty > 1 &&\\n            target > uint256(_diff);\\n    }\\n}\\n\",\"keccak256\":\"0x7bbbdf84ce8b36a28fc7f67d8144434ca19051f3706cf2d1053d15bee3f5624d\",\"license\":\"UNLICENSED\"},\"contracts/ethash/keccak512.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./binary.sol\\\";\\n\\nlibrary Keccak512 {\\n    using LittleEndian for bytes;\\n\\n    function keccak_f(uint256[25] memory A)\\n        private\\n        pure\\n        returns (uint256[25] memory)\\n    {\\n        uint256[5] memory C;\\n        uint256[5] memory D;\\n        //uint x;\\n        //uint y;\\n        //uint D_0; uint D_1; uint D_2; uint D_3; uint D_4;\\n        uint256[25] memory B;\\n\\n        uint256[24] memory RC = [\\n            uint256(0x0000000000000001),\\n            0x0000000000008082,\\n            0x800000000000808A,\\n            0x8000000080008000,\\n            0x000000000000808B,\\n            0x0000000080000001,\\n            0x8000000080008081,\\n            0x8000000000008009,\\n            0x000000000000008A,\\n            0x0000000000000088,\\n            0x0000000080008009,\\n            0x000000008000000A,\\n            0x000000008000808B,\\n            0x800000000000008B,\\n            0x8000000000008089,\\n            0x8000000000008003,\\n            0x8000000000008002,\\n            0x8000000000000080,\\n            0x000000000000800A,\\n            0x800000008000000A,\\n            0x8000000080008081,\\n            0x8000000000008080,\\n            0x0000000080000001,\\n            0x8000000080008008\\n        ];\\n\\n        for (uint256 i = 0; i < 24; i++) {\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                C[x] = A[5*x]^A[5*x+1]^A[5*x+2]^A[5*x+3]^A[5*x+4];\\n            }*/\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                D[x] = C[(x+4)%5]^((C[(x+1)%5] * 2)&0xffffffffffffffff | (C[(x+1)%5]/(2**63)));\\n            }*/\\n\\n            D[0] =\\n                C[4] ^\\n                (((C[1] * 2) & 0xffffffffffffffff) | (C[1] / (2**63)));\\n            D[1] =\\n                C[0] ^\\n                (((C[2] * 2) & 0xffffffffffffffff) | (C[2] / (2**63)));\\n            D[2] =\\n                C[1] ^\\n                (((C[3] * 2) & 0xffffffffffffffff) | (C[3] / (2**63)));\\n            D[3] =\\n                C[2] ^\\n                (((C[4] * 2) & 0xffffffffffffffff) | (C[4] / (2**63)));\\n            D[4] =\\n                C[3] ^\\n                (((C[0] * 2) & 0xffffffffffffffff) | (C[0] / (2**63)));\\n\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                for( y = 0 ; y < 5 ; y++ ) {\\n                    A[5*x+y] = A[5*x+y] ^ D[x];\\n                }\\n            }*/\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = (((A[1] * (2**36)) & 0xffffffffffffffff) | (A[1] / (2**28)));\\n            B[11] = (((A[2] * (2**3)) & 0xffffffffffffffff) | (A[2] / (2**61)));\\n            B[19] = (((A[3] * (2**41)) & 0xffffffffffffffff) |\\n                (A[3] / (2**23)));\\n            B[22] = (((A[4] * (2**18)) & 0xffffffffffffffff) |\\n                (A[4] / (2**46)));\\n            B[2] = (((A[5] * (2**1)) & 0xffffffffffffffff) | (A[5] / (2**63)));\\n            B[5] = (((A[6] * (2**44)) & 0xffffffffffffffff) | (A[6] / (2**20)));\\n            B[13] = (((A[7] * (2**10)) & 0xffffffffffffffff) |\\n                (A[7] / (2**54)));\\n            B[16] = (((A[8] * (2**45)) & 0xffffffffffffffff) |\\n                (A[8] / (2**19)));\\n            B[24] = (((A[9] * (2**2)) & 0xffffffffffffffff) | (A[9] / (2**62)));\\n            B[4] = (((A[10] * (2**62)) & 0xffffffffffffffff) |\\n                (A[10] / (2**2)));\\n            B[7] = (((A[11] * (2**6)) & 0xffffffffffffffff) |\\n                (A[11] / (2**58)));\\n            B[10] = (((A[12] * (2**43)) & 0xffffffffffffffff) |\\n                (A[12] / (2**21)));\\n            B[18] = (((A[13] * (2**15)) & 0xffffffffffffffff) |\\n                (A[13] / (2**49)));\\n            B[21] = (((A[14] * (2**61)) & 0xffffffffffffffff) |\\n                (A[14] / (2**3)));\\n            B[1] = (((A[15] * (2**28)) & 0xffffffffffffffff) |\\n                (A[15] / (2**36)));\\n            B[9] = (((A[16] * (2**55)) & 0xffffffffffffffff) |\\n                (A[16] / (2**9)));\\n            B[12] = (((A[17] * (2**25)) & 0xffffffffffffffff) |\\n                (A[17] / (2**39)));\\n            B[15] = (((A[18] * (2**21)) & 0xffffffffffffffff) |\\n                (A[18] / (2**43)));\\n            B[23] = (((A[19] * (2**56)) & 0xffffffffffffffff) |\\n                (A[19] / (2**8)));\\n            B[3] = (((A[20] * (2**27)) & 0xffffffffffffffff) |\\n                (A[20] / (2**37)));\\n            B[6] = (((A[21] * (2**20)) & 0xffffffffffffffff) |\\n                (A[21] / (2**44)));\\n            B[14] = (((A[22] * (2**39)) & 0xffffffffffffffff) |\\n                (A[22] / (2**25)));\\n            B[17] = (((A[23] * (2**8)) & 0xffffffffffffffff) |\\n                (A[23] / (2**56)));\\n            B[20] = (((A[24] * (2**14)) & 0xffffffffffffffff) |\\n                (A[24] / (2**50)));\\n\\n            /*Xi state*/\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                for( y = 0 ; y < 5 ; y++ ) {\\n                    A[5*x+y] = B[5*x+y]^((~B[5*((x+1)%5)+y]) & B[5*((x+2)%5)+y]);\\n                }\\n            }*/\\n\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n    function sponge(uint256[9] memory M)\\n        private\\n        pure\\n        returns (uint256[16] memory)\\n    {\\n        //require( (M.length * 8) == 72 );\\n        //M[7] = 0x01;\\n        //M[8] = 0x8000000000000001;\\n\\n        uint256 r = 72;\\n        uint256 w = 8;\\n        uint256 size = M.length * 8;\\n\\n        uint256[25] memory S;\\n        uint256 i;\\n        uint256 y;\\n        uint256 x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint256[16] memory result;\\n        uint256 b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    /*\\n    address constant KECCAK512 = address(uint160(0x10001));\\n    function keccak512(bytes memory data) view private returns(bytes memory) {\\n        (bool success, bytes memory hash) = KECCAK512.staticcall(data);\\n        require(success, string(hash));\\n        return hash;\\n    }\\n\\n   function sha3_512(bytes memory data) view public returns(bytes memory) {\\n       return keccak512(data);\\n   }\\n*/\\n    function sha3_512(bytes memory data) internal pure returns (bytes memory) {\\n        require(\\n            data.length == 40 || data.length == 64,\\n            \\\"sha512 only support 64 or 40 bytes\\\"\\n        );\\n        uint256 dataWords = data.length / 8;\\n        uint256[9] memory M;\\n        for (uint256 i = 0; i < dataWords; i++) {\\n            uint256 dataOffset = i * 8;\\n            M[i] =\\n                uint256(uint8(data[dataOffset])) |\\n                (uint256(uint8(data[dataOffset + 1])) << 8) |\\n                (uint256(uint8(data[dataOffset + 2])) << 16) |\\n                (uint256(uint8(data[dataOffset + 3])) << 24) |\\n                (uint256(uint8(data[dataOffset + 4])) << 32) |\\n                (uint256(uint8(data[dataOffset + 5])) << 40) |\\n                (uint256(uint8(data[dataOffset + 6])) << 48) |\\n                (uint256(uint8(data[dataOffset + 7])) << 56);\\n        }\\n        M[dataWords] = 1;\\n        M[8] |= 0x8000000000000000;\\n        uint256[16] memory result32 = sponge(M);\\n        bytes memory resultBytes = new bytes(64);\\n        for (uint32 i = 0; i < result32.length; i++) {\\n            resultBytes.PutUint32(i * 4, uint32(result32[i]));\\n        }\\n        return resultBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x3b49b69d0232051389a9a429b406e86e1cef1411258a177e3d702967b4113161\",\"license\":\"UNLICENSED\"},\"contracts/lib/EthUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Created on 2019-12-28\\n * @summary: The EthUtils library contains utility functions\\n * @author: Tuan Vu (tuanvd@gmail.com)\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EthUtils {\\n    function bytesToBytes32(bytes memory b, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    function hexStrToBytes(string memory _hexStr)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            bytes(_hexStr)[0] != \\\"0\\\" ||\\n            bytes(_hexStr)[1] != \\\"x\\\" ||\\n            bytes(_hexStr).length % 2 != 0 ||\\n            bytes(_hexStr).length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes((bytes(_hexStr).length - 2) / 2);\\n\\n        for (uint256 i = 2; i < bytes(_hexStr).length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(bytes(_hexStr)[i]) >= 48 && uint8(bytes(_hexStr)[i]) <= 57\\n            ) tetrad1 = uint8(bytes(_hexStr)[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(bytes(_hexStr)[i + 1]) >= 48 &&\\n                uint8(bytes(_hexStr)[i + 1]) <= 57\\n            ) tetrad2 = uint8(bytes(_hexStr)[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(bytes(_hexStr)[i]) >= 65 && uint8(bytes(_hexStr)[i]) <= 70\\n            ) tetrad1 = uint8(bytes(_hexStr)[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(bytes(_hexStr)[i + 1]) >= 65 &&\\n                uint8(bytes(_hexStr)[i + 1]) <= 70\\n            ) tetrad2 = uint8(bytes(_hexStr)[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(bytes(_hexStr)[i]) >= 97 &&\\n                uint8(bytes(_hexStr)[i]) <= 102\\n            ) tetrad1 = uint8(bytes(_hexStr)[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(bytes(_hexStr)[i + 1]) >= 97 &&\\n                uint8(bytes(_hexStr)[i + 1]) <= 102\\n            ) tetrad2 = uint8(bytes(_hexStr)[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 1] = bytes1(16 * tetrad1 + tetrad2);\\n        }\\n\\n        return bytes_array;\\n    }\\n}\\n\",\"keccak256\":\"0xdfe26981f5d16e997b2266b9195c6a992726b75281d87703351bd726fdeb2dfa\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) <= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, self)\\n            )\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint256 self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int256 self) internal pure returns (bytes memory) {\\n        return encodeUint(uint256(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint256 len, uint256 offset)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen - i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31)\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xa0058a159fe705052d9b4eef67d83b892111fd0d3ce48174d2ace8474a144358\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n *   Updated by Tuan Vu (tuanvd@gmail.com)\\n * Please reach out with any questions or concerns\\n */\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n        // return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    function toBytes32(RLPItem memory item) internal pure returns (bytes32) {\\n        return _bytesToBytes32(toBytes(item), 0);\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @param convert a memory bytes to byte32\\n     */\\n    function _bytesToBytes32(bytes memory b, uint256 offset)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n}\\n\",\"keccak256\":\"0x57dc11b8f3863ab41ef5771ccbbc95f969cff8d612e9d87148e66196aaa74342\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "title": "Ethereum light client",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 543,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 546,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2075,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 699,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 788,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2833,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "firstBlock",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 2838,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "blocks",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_struct(StoredBlockHeader)2824_storage)"
      },
      {
        "astId": 2842,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "blockExisting",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2846,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "verifiedBlocks",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2850,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "finalizedBlocks",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2855,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "blocksByHeight",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2859,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "blocksByHeightExisting",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2861,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "blockHeightMax",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 2865,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "longestBranchHead",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2870,
        "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
        "label": "finalityConfirms",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(StoredBlockHeader)2824_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EthereumLightClient.StoredBlockHeader)",
        "numberOfBytes": "32",
        "value": "t_struct(StoredBlockHeader)2824_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StoredBlockHeader)2824_storage": {
        "encoding": "inplace",
        "label": "struct EthereumLightClient.StoredBlockHeader",
        "members": [
          {
            "astId": 2809,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "parentHash",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2811,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "stateRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2813,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "transactionsRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2815,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "receiptsRoot",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2817,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "number",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2819,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "difficulty",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2821,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "time",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2823,
            "contract": "contracts/EthereumLightClient.sol:EthereumLightClient",
            "label": "hash",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}