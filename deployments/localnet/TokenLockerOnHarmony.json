{
  "address": "0x65A4191e03E681a35F0B524fbf3ac9323A17F545",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenReq",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAck",
          "type": "address"
        }
      ],
      "name": "TokenMapAck",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenReq",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "TokenMapReq",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RxMapped",
      "outputs": [
        {
          "internalType": "contract BridgedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RxMappedInv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RxTokens",
      "outputs": [
        {
          "internalType": "contract BridgedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TxMapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TxMappedInv",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TxTokens",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "otherSide",
          "type": "address"
        }
      ],
      "name": "bind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract EthereumLightClient",
          "name": "newClient",
          "type": "address"
        }
      ],
      "name": "changeLightClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20Upgradeable",
          "name": "thisSideToken",
          "type": "address"
        }
      ],
      "name": "issueTokenMapReq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightclient",
      "outputs": [
        {
          "internalType": "contract EthereumLightClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "otherSideBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "spentReceipt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract BridgedToken",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNo",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "rootHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "mptkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "validateAndExecuteProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26d8ab6c4fbacdd677fe7513c741caed5a8aade205ac5865300fe77411ab4ca7",
  "receipt": {
    "to": null,
    "from": "0xA5241513DA9F4463F1d4874b548dFBAC29D91f34",
    "contractAddress": "0x65A4191e03E681a35F0B524fbf3ac9323A17F545",
    "transactionIndex": 0,
    "gasUsed": "3570443",
    "logsBloom": "0x
    "blockHash": "0xf0c89cee3d84e7e7f7f6653ce1b395c504ced267ff29b4eed21163a59b308155",
    "transactionHash": "0x26d8ab6c4fbacdd677fe7513c741caed5a8aade205ac5865300fe77411ab4ca7",
    "logs": [],
    "blockNumber": 11290,
    "cumulativeGasUsed": "3570443",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc8fd11819344e226bcba417eabab7ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReq\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAck\",\"type\":\"address\"}],\"name\":\"TokenMapAck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReq\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenMapReq\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RxMapped\",\"outputs\":[{\"internalType\":\"contract BridgedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RxMappedInv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RxTokens\",\"outputs\":[{\"internalType\":\"contract BridgedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TxMapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TxMappedInv\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TxTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otherSide\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract EthereumLightClient\",\"name\":\"newClient\",\"type\":\"address\"}],\"name\":\"changeLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"thisSideToken\",\"type\":\"address\"}],\"name\":\"issueTokenMapReq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightclient\",\"outputs\":[{\"internalType\":\"contract EthereumLightClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherSideBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"spentReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BridgedToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"mptkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"validateAndExecuteProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenLockerOnHarmony.sol\":\"TokenLockerOnHarmony\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7adeb6058a53a8779699d618eee2ccca5cdc1cc601d423e61e5a7bbc279a29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/BridgedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract BridgedToken is ERC20Upgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) external initializer {\\n        __ERC20_init(name, symbol);\\n        __ERC20Burnable_init();\\n        // decimals(decimals);\\n        // _setupDecimals(decimals);\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5e03ee3866fe80347222134190409b5959ffb89e60ce36b09c63073bfc47cc9d\",\"license\":\"UNLICENSED\"},\"contracts/EthereumLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./EthereumParser.sol\\\";\\nimport \\\"./lib/EthUtils.sol\\\";\\nimport \\\"./ethash/ethash.sol\\\";\\n\\n/// @title Ethereum light client\\ncontract EthereumLightClient is Ethash, Initializable, PausableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    \\n    struct StoredBlockHeader {\\n        uint256 parentHash;\\n        uint256 stateRoot;\\n        uint256 transactionsRoot;\\n        uint256 receiptsRoot;\\n        uint256 number;\\n        uint256 difficulty;\\n        uint256 time;\\n        uint256 hash;\\n    }\\n\\n    struct HeaderInfo {\\n        uint256 total_difficulty;\\n        bytes32 parent_hash;\\n        uint64 number;\\n    }\\n\\n    // The first block header hash\\n    uint256 public firstBlock;\\n\\n    // Blocks data, in the form: blockHeaderHash => BlockHeader\\n    mapping(uint256 => StoredBlockHeader) public blocks;\\n\\n    // Block existing map, in the form: blockHeaderHash => bool\\n    mapping(uint256 => bool) public blockExisting;\\n\\n    // Blocks in 'Verified' state\\n    mapping(uint256 => bool) public verifiedBlocks;\\n\\n    // Blocks in 'Finalized' state\\n    mapping(uint256 => bool) public finalizedBlocks;\\n\\n    // Valid relayed blocks for a block height, in the form: blockNumber => blockHeaderHash[]\\n    mapping(uint256 => uint256[]) public blocksByHeight;\\n\\n    // Block height existing map, in the form: blockNumber => bool\\n    mapping(uint256 => bool) public blocksByHeightExisting;\\n\\n    // Max block height stored\\n    uint256 public blockHeightMax;\\n\\n    // Block header hash that points to longest chain head\\n    // (please note that 'longest' chain is based on total difficulty)\\n    // uint public longestChainHead;\\n\\n    // Longest branch head of each checkpoint, in the form: (checkpoint block hash) => (head block hash)\\n    // (note that 'longest branch' means the branch which has biggest cumulative difficulty from checkpoint)\\n    mapping(uint256 => uint256) public longestBranchHead;\\n\\n    uint256 private constant DEFAULT_FINALITY_CONFIRMS = 13;\\n\\n    uint256 public finalityConfirms;\\n\\n    function initialize(bytes memory _rlpHeader) external initializer {\\n        finalityConfirms = DEFAULT_FINALITY_CONFIRMS;\\n\\n        uint256 blockHash = EthereumParser.calcBlockHeaderHash(_rlpHeader);\\n        // Parse rlp-encoded block header into structure\\n        EthereumParser.BlockHeader memory header = EthereumParser\\n            .parseBlockHeader(_rlpHeader);\\n        // Save block header info\\n        StoredBlockHeader memory storedBlock = StoredBlockHeader({\\n            parentHash: header.parentHash,\\n            stateRoot: header.stateRoot,\\n            transactionsRoot: header.transactionsRoot,\\n            receiptsRoot: header.receiptsRoot,\\n            number: header.number,\\n            difficulty: header.difficulty,\\n            time: header.timestamp,\\n            hash: blockHash\\n        });\\n        _setFirstBlock(storedBlock);\\n    }\\n\\n    //uint32 constant loopAccesses = 64;      // Number of accesses in hashimoto loop\\n    function addBlockHeader(\\n        bytes memory _rlpHeader,\\n        bytes32[4][loopAccesses] memory cache,\\n        bytes32[][loopAccesses] memory proofs\\n    ) public whenNotPaused returns (bool) {\\n        // Calculate block header hash\\n        uint256 blockHash = EthereumParser.calcBlockHeaderHash(_rlpHeader);\\n        // Check block existing\\n        require(\\n            !blockExisting[blockHash],\\n            \\\"Relay block failed: block already relayed\\\"\\n        );\\n\\n        // Parse rlp-encoded block header into structure\\n        EthereumParser.BlockHeader memory header = EthereumParser\\n            .parseBlockHeader(_rlpHeader);\\n\\n        // Check the existence of parent block\\n        require(\\n            blockExisting[header.parentHash],\\n            \\\"Relay block failed: parent block not relayed yet\\\"\\n        );\\n\\n        // Check block height\\n        require(\\n            header.number == blocks[header.parentHash].number.add(1),\\n            \\\"Relay block failed: invalid block blockHeightMax\\\"\\n        );\\n\\n        // Check timestamp\\n        require(\\n            header.timestamp > blocks[header.parentHash].time,\\n            \\\"Relay block failed: invalid timestamp\\\"\\n        );\\n\\n        // Check difficulty\\n        require(\\n            _checkDiffValidity(\\n                header.difficulty,\\n                blocks[header.parentHash].difficulty\\n            ),\\n            \\\"Relay block failed: invalid difficulty\\\"\\n        );\\n\\n        // Verify block PoW\\n        uint256 sealHash = EthereumParser.calcBlockSealHash(_rlpHeader);\\n        bool rVerified = verifyEthash(\\n            bytes32(sealHash),\\n            uint64(header.nonce),\\n            uint64(header.number),\\n            cache,\\n            proofs,\\n            header.difficulty,\\n            header.mixHash\\n        );\\n        require(rVerified, \\\"Relay block failed: invalid PoW\\\");\\n\\n        // Save block header info\\n        StoredBlockHeader memory storedBlock = StoredBlockHeader({\\n            parentHash: header.parentHash,\\n            stateRoot: header.stateRoot,\\n            transactionsRoot: header.transactionsRoot,\\n            receiptsRoot: header.receiptsRoot,\\n            number: header.number,\\n            difficulty: header.difficulty,\\n            time: header.timestamp,\\n            hash: blockHash\\n        });\\n\\n        blocks[blockHash] = storedBlock;\\n        blockExisting[blockHash] = true;\\n        // verifiedBlocks[blockHash] = true;\\n\\n        blocksByHeight[header.number].push(blockHash);\\n        blocksByHeightExisting[header.number] = true;\\n\\n        if (header.number > blockHeightMax) {\\n            blockHeightMax = header.number;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getBlockHeightMax() public view returns (uint256) {\\n        return blockHeightMax;\\n    }\\n\\n    function getStateRoot(bytes32 blockHash) public view returns (bytes32) {\\n        return bytes32(blocks[uint256(blockHash)].stateRoot);\\n    }\\n\\n    function getTxRoot(bytes32 blockHash) public view returns (bytes32) {\\n        return bytes32(blocks[uint256(blockHash)].transactionsRoot);\\n    }\\n\\n    function getReceiptRoot(bytes32 blockHash) public view returns (bytes32) {\\n        return bytes32(blocks[uint256(blockHash)].receiptsRoot);\\n    }\\n\\n    function VerifyReceiptsHash(bytes32 blockHash, bytes32 receiptsHash)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return bytes32(blocks[uint256(blockHash)].receiptsRoot) == receiptsHash;\\n    }\\n\\n    // Check the difficulty of block is valid or not\\n    // (the block difficulty adjustment is described here: https://github.com/ethereum/EIPs/issues/100)\\n    // Note that this is only 'minimal check' because we do not have 'block uncles' information to calculate exactly.\\n    // 'Minimal check' is enough to prevent someone from spamming relaying blocks with quite small difficulties\\n    function _checkDiffValidity(uint256 diff, uint256 parentDiff)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return diff >= parentDiff.sub((parentDiff / 10000) * 99);\\n    }\\n\\n    function _setFirstBlock(StoredBlockHeader memory toSetBlock) private {\\n        firstBlock = toSetBlock.hash;\\n\\n        blocks[toSetBlock.hash] = toSetBlock;\\n        blockExisting[toSetBlock.hash] = true;\\n\\n        verifiedBlocks[toSetBlock.hash] = true;\\n        finalizedBlocks[toSetBlock.hash] = true;\\n\\n        blocksByHeight[toSetBlock.number].push(toSetBlock.hash);\\n        blocksByHeightExisting[toSetBlock.number] = true;\\n\\n        blockHeightMax = toSetBlock.number;\\n\\n        longestBranchHead[toSetBlock.hash] = toSetBlock.hash;\\n    }\\n}\\n\",\"keccak256\":\"0xa42f1007ed5dc73d0df5a694f6dbaf4efd2a3648980a53919a9a07b137e51a39\",\"license\":\"UNLICENSED\"},\"contracts/EthereumParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Created on 2019-12-28\\n * @summary: The EthCommon library contains common structures / functions\\n * @author: Tuan Vu (tuanvd@gmail.com)\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\nimport \\\"./lib/RLPEncode.sol\\\";\\n\\nlibrary EthereumParser {\\n    using RLPReader for bytes;\\n    using RLPReader for uint256;\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for RLPReader.Iterator;\\n\\n    using RLPEncode for bytes;\\n    using RLPEncode for bytes[];\\n\\n    struct BlockHeader {\\n        uint256 parentHash;\\n        uint256 sha3Uncles;\\n        address miner;\\n        uint256 stateRoot;\\n        uint256 transactionsRoot;\\n        uint256 receiptsRoot;\\n        bytes logsBloom;\\n        uint256 difficulty;\\n        uint256 number;\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 timestamp;\\n        bytes extraData;\\n        uint256 mixHash;\\n        uint256 nonce;\\n        uint256 baseFeePerGas;\\n    }\\n\\n    /**\\n     * Parse RLP-encoded block header into BlockHeader data structure\\n     *  @param _rlpHeader: RLP-encoded block header with data fields order as defined in the BlockHeader struct\\n     **/\\n    function parseBlockHeader(bytes memory _rlpHeader)\\n        internal\\n        pure\\n        returns (BlockHeader memory header)\\n    {\\n        RLPReader.Iterator memory it = _rlpHeader.toRlpItem().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) header.parentHash = it.next().toUint();\\n            else if (idx == 1) header.sha3Uncles = it.next().toUint();\\n            else if (idx == 2) header.miner = it.next().toAddress();\\n            else if (idx == 3) header.stateRoot = it.next().toUint();\\n            else if (idx == 4) header.transactionsRoot = it.next().toUint();\\n            else if (idx == 5) header.receiptsRoot = it.next().toUint();\\n            else if (idx == 6) header.logsBloom = it.next().toBytes();\\n            else if (idx == 7) header.difficulty = it.next().toUint();\\n            else if (idx == 8) header.number = it.next().toUint();\\n            else if (idx == 9) header.gasLimit = it.next().toUint();\\n            else if (idx == 10) header.gasUsed = it.next().toUint();\\n            else if (idx == 11) header.timestamp = it.next().toUint();\\n            else if (idx == 12) header.extraData = it.next().toBytes();\\n            else if (idx == 13) header.mixHash = it.next().toUint();\\n            else if (idx == 14) header.nonce = it.next().toUint();\\n            else if (idx == 15) header.baseFeePerGas = it.next().toUint();\\n            else it.next();\\n\\n            idx++;\\n        }\\n        return header;\\n    }\\n\\n    function calcBlockHeaderHash(bytes memory _rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(_rlpHeader));\\n    }\\n\\n    function calcBlockSealHash(bytes memory _rlpHeader)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        bytes[] memory rlpFields = new bytes[](14);\\n        RLPReader.Iterator memory it = _rlpHeader.toRlpItem().iterator();\\n        uint256 idx = 0;\\n        while (it.hasNext() && idx < 14) {\\n            if (idx == 13) {\\n                it.next();\\n                it.next();\\n            }\\n            rlpFields[idx] = it.next().toRlpBytes();\\n            idx++;\\n        }\\n\\n        bytes memory toSealRlpData = rlpFields.encodeList();\\n        return uint256(keccak256(toSealRlpData));\\n    }\\n\\n    struct Transaction {\\n        uint256 nonce;\\n        uint256 gasPrice;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes input;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @param _rlpTx: RLP-encoded tx with data fields order as defined in the Tx struct\\n     **/\\n    function parseTx(bytes memory _rlpTx)\\n        internal\\n        pure\\n        returns (Transaction memory trans)\\n    {\\n        RLPReader.Iterator memory it = _rlpTx.toRlpItem().iterator();\\n        uint256 idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) trans.nonce = it.next().toUint();\\n            else if (idx == 1) trans.gasPrice = it.next().toUint();\\n            else if (idx == 2) trans.gas = it.next().toUint();\\n            else if (idx == 3) trans.to = it.next().toAddress();\\n            else if (idx == 4) trans.value = it.next().toUint();\\n            else if (idx == 5) trans.input = it.next().toBytes();\\n            else if (idx == 6) trans.v = uint8(it.next().toUint());\\n            else if (idx == 7) trans.r = it.next().toBytes32();\\n            else if (idx == 8) trans.s = it.next().toBytes32();\\n            else it.next();\\n            idx++;\\n        }\\n        return trans;\\n    }\\n}\\n\",\"keccak256\":\"0xa49e7a57c5d72e5112783b1b93d4cbf1bf33f9ec52f6e0337cb163efe86dde4e\",\"license\":\"UNLICENSED\"},\"contracts/EthereumProver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\n\\nlibrary EthereumProver {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n\\n    function isEmpty(RLPReader.RLPItem memory item)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (item.len != 1) {\\n            return false;\\n        }\\n        uint8 b;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            b := byte(0, mload(memPtr))\\n        }\\n        return\\n            b == 0x80 || /* empty byte string */\\n            b == 0xc0; /* empty list */\\n    }\\n\\n    function isEmptyBytesequence(RLPReader.RLPItem memory item)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (item.len != 1) {\\n            return false;\\n        }\\n        uint8 b;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            b := byte(0, mload(memPtr))\\n        }\\n        return b == 0x80; /* empty byte string */\\n    }\\n\\n    function decodeNibbles(\\n        bytes memory compact,\\n        uint256 skipNibbles,\\n        uint256 append16\\n    ) internal pure returns (bytes memory nibbles) {\\n        require(compact.length > 0);\\n\\n        uint256 length = compact.length * 2;\\n        require(skipNibbles <= length);\\n        length -= skipNibbles;\\n\\n        nibbles = new bytes(length + append16);\\n        if (append16 == 1) nibbles[nibbles.length - 1] = bytes1(uint8(0x10));\\n        uint256 nibblesLength = 0;\\n\\n        for (uint256 i = skipNibbles; i < skipNibbles + length; i += 1) {\\n            if (i % 2 == 0) {\\n                nibbles[nibblesLength] = bytes1(\\n                    (uint8(compact[i / 2]) >> 4) & 0xF\\n                );\\n            } else {\\n                nibbles[nibblesLength] = bytes1(\\n                    (uint8(compact[i / 2]) >> 0) & 0xF\\n                );\\n            }\\n            nibblesLength += 1;\\n        }\\n\\n        assert(nibblesLength + append16 == nibbles.length);\\n    }\\n\\n    function merklePatriciaCompactDecode(bytes memory compact)\\n        internal\\n        pure\\n        returns (bool isLeaf, bytes memory nibbles)\\n    {\\n        require(compact.length > 0);\\n        uint256 first_nibble = (uint8(compact[0]) >> 4) & 0xF;\\n        uint256 skipNibbles;\\n        if (first_nibble == 0) {\\n            skipNibbles = 2;\\n            isLeaf = false;\\n        } else if (first_nibble == 1) {\\n            skipNibbles = 1;\\n            isLeaf = false;\\n        } else if (first_nibble == 2) {\\n            skipNibbles = 2;\\n            isLeaf = true;\\n        } else if (first_nibble == 3) {\\n            skipNibbles = 1;\\n            isLeaf = true;\\n        } else {\\n            // Not supposed to happen!\\n            revert();\\n        }\\n        return (isLeaf, decodeNibbles(compact, skipNibbles, isLeaf ? 1 : 0));\\n    }\\n\\n    function sharedPrefixLength(\\n        uint256 xsOffset,\\n        bytes memory xs,\\n        bytes memory ys\\n    ) internal pure returns (uint256) {\\n        uint256 i;\\n        for (i = 0; i + xsOffset < xs.length && i < ys.length; i++) {\\n            if (xs[i + xsOffset] != ys[i]) {\\n                return i;\\n            }\\n        }\\n        return i;\\n    }\\n\\n    /// @dev Computes the hash of the Merkle-Patricia-Trie hash of the input.\\n    ///      Merkle-Patricia-Tries use a weird \\\"hash function\\\" that outputs\\n    ///      *variable-length* hashes: If the input is shorter than 32 bytes,\\n    ///      the MPT hash is the input. Otherwise, the MPT hash is the\\n    ///      Keccak-256 hash of the input.\\n    ///      The easiest way to compare variable-length byte sequences is\\n    ///      to compare their Keccak-256 hashes.\\n    /// @param input The byte sequence to be hashed.\\n    /// @return Keccak-256(MPT-hash(input))\\n    function mptHashHash(bytes memory input) internal pure returns (bytes32) {\\n        if (input.length < 32) {\\n            return keccak256(input);\\n        } else {\\n            return\\n                keccak256(abi.encodePacked(keccak256(abi.encodePacked(input))));\\n        }\\n    }\\n\\n    /// @dev Validates a Merkle-Patricia-Trie proof.\\n    ///      If the proof proves the inclusion of some key-value pair in the\\n    ///      trie, the value is returned. Otherwise, i.e. if the proof proves\\n    ///      the exclusion of a key from the trie, an empty byte array is\\n    ///      returned.\\n    /// @param rootHash is the Keccak-256 hash of the root node of the MPT.\\n    /// @param mptKey is the key (consisting of nibbles) of the node whose\\n    ///        inclusion/exclusion we are proving.\\n    /// @param proof is decoded to stack of MPT nodes (starting with the root) that\\n    ///        need to be traversed during verification.\\n    /// @return value whose inclusion is proved or an empty byte array for\\n    ///         a proof of exclusion\\n    function validateMPTProof(\\n        bytes32 rootHash,\\n        bytes memory mptKey,\\n        bytes memory proof\\n    ) internal pure returns (bytes memory value) {\\n        RLPReader.RLPItem[] memory stack = proof.toRlpItem().toList();\\n        mptKey = decodeNibbles(mptKey, 0, 1);\\n        uint256 mptKeyOffset = 0;\\n\\n        bytes32 nodeHashHash;\\n        bytes memory rlpNode;\\n        RLPReader.RLPItem[] memory node;\\n\\n        RLPReader.RLPItem memory rlpValue;\\n\\n        if (stack.length == 0) {\\n            // Root hash of empty Merkle-Patricia-Trie\\n            require(\\n                rootHash ==\\n                    0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\n            );\\n            return new bytes(0);\\n        }\\n\\n        // Traverse stack of nodes starting at root.\\n        for (uint256 i = 0; i < stack.length; i++) {\\n            // We use the fact that an rlp encoded list consists of some\\n            // encoding of its length plus the concatenation of its\\n            // *rlp-encoded* items.\\n            rlpNode = stack[i].toRlpBytes();\\n            // The root node is hashed with Keccak-256 ...\\n            if (i == 0 && rootHash != keccak256(rlpNode)) {\\n                revert();\\n            }\\n            // ... whereas all other nodes are hashed with the MPT\\n            // hash function.\\n            if (i != 0 && nodeHashHash != mptHashHash(rlpNode)) {\\n                revert();\\n            }\\n            // We verified that stack[i] has the correct hash, so we\\n            // may safely decode it.\\n            node = stack[i].toList();\\n\\n            if (node.length == 2) {\\n                // Extension or Leaf node\\n\\n                bool isLeaf;\\n                bytes memory nodeKey;\\n                (isLeaf, nodeKey) = merklePatriciaCompactDecode(\\n                    node[0].toBytes()\\n                );\\n\\n                uint256 prefixLength = sharedPrefixLength(\\n                    mptKeyOffset,\\n                    mptKey,\\n                    nodeKey\\n                );\\n                mptKeyOffset += prefixLength;\\n\\n                if (prefixLength < nodeKey.length) {\\n                    // Proof claims divergent extension or leaf. (Only\\n                    // relevant for proofs of exclusion.)\\n                    // An Extension/Leaf node is divergent iff it \\\"skips\\\" over\\n                    // the point at which a Branch node should have been had the\\n                    // excluded key been included in the trie.\\n                    // Example: Imagine a proof of exclusion for path [1, 4],\\n                    // where the current node is a Leaf node with\\n                    // path [1, 3, 3, 7]. For [1, 4] to be included, there\\n                    // should have been a Branch node at [1] with a child\\n                    // at 3 and a child at 4.\\n\\n                    // Sanity check\\n                    if (i < stack.length - 1) {\\n                        // divergent node must come last in proof\\n                        revert();\\n                    }\\n\\n                    return new bytes(0);\\n                }\\n\\n                if (isLeaf) {\\n                    // Sanity check\\n                    if (i < stack.length - 1) {\\n                        // leaf node must come last in proof\\n                        revert();\\n                    }\\n\\n                    if (mptKeyOffset < mptKey.length) {\\n                        return new bytes(0);\\n                    }\\n\\n                    rlpValue = node[1];\\n                    return rlpValue.toBytes();\\n                } else {\\n                    // extension\\n                    // Sanity check\\n                    if (i == stack.length - 1) {\\n                        // shouldn't be at last level\\n                        revert();\\n                    }\\n\\n                    if (!node[1].isList()) {\\n                        // rlp(child) was at least 32 bytes. node[1] contains\\n                        // Keccak256(rlp(child)).\\n                        nodeHashHash = keccak256(node[1].toBytes());\\n                    } else {\\n                        // rlp(child) was at less than 32 bytes. node[1] contains\\n                        // rlp(child).\\n                        nodeHashHash = keccak256(node[1].toRlpBytes());\\n                    }\\n                }\\n            } else if (node.length == 17) {\\n                // Branch node\\n\\n                if (mptKeyOffset != mptKey.length) {\\n                    // we haven't consumed the entire path, so we need to look at a child\\n                    uint8 nibble = uint8(mptKey[mptKeyOffset]);\\n                    mptKeyOffset += 1;\\n                    if (nibble >= 16) {\\n                        // each element of the path has to be a nibble\\n                        revert();\\n                    }\\n\\n                    if (isEmptyBytesequence(node[nibble])) {\\n                        // Sanity\\n                        if (i != stack.length - 1) {\\n                            // leaf node should be at last level\\n                            revert();\\n                        }\\n\\n                        return new bytes(0);\\n                    } else if (!node[nibble].isList()) {\\n                        nodeHashHash = keccak256(node[nibble].toBytes());\\n                    } else {\\n                        nodeHashHash = keccak256(node[nibble].toRlpBytes());\\n                    }\\n                } else {\\n                    // we have consumed the entire mptKey, so we need to look at what's contained in this node.\\n\\n                    // Sanity\\n                    if (i != stack.length - 1) {\\n                        // should be at last level\\n                        revert();\\n                    }\\n\\n                    return node[16].toBytes();\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb74e4337bbeb22064b6761345ba1ece1a1c45c447c5015d40a8b7d3a0b591afc\",\"license\":\"UNLICENSED\"},\"contracts/TokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\nimport \\\"./BridgedToken.sol\\\";\\nimport \\\"./TokenRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\ncontract TokenLocker is TokenRegistry {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    event Locked(\\n        address indexed token,\\n        address indexed sender,\\n        uint256 amount,\\n        address recipient\\n    );\\n\\n    event Burn(\\n        address indexed token,\\n        address indexed sender,\\n        uint256 amount,\\n        address recipient\\n    );\\n\\n    bytes32 constant lockEventSig =\\n        keccak256(\\\"Locked(address,address,uint256,address)\\\");\\n    bytes32 constant burnEventSig =\\n        keccak256(\\\"Burn(address,address,uint256,address)\\\");\\n\\n    address public otherSideBridge;\\n\\n    function unlock(\\n        BridgedToken token,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        require(recipient != address(0), \\\"recipient is a zero address\\\");\\n        require(\\n            RxMappedInv[address(token)] != address(0),\\n            \\\"bridge does not exist\\\"\\n        );\\n        token.burnFrom(msg.sender, amount);\\n        emit Burn(address(token), msg.sender, amount, recipient);\\n    }\\n\\n    function lock(\\n        IERC20Upgradeable token,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        require(recipient != address(0), \\\"recipient is a zero address\\\");\\n        require(\\n            TxMapped[address(token)] != address(0),\\n            \\\"bridge does not exist\\\"\\n        );\\n        // grabbing the actual amount that is transferred\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n        uint256 actualAmount = balanceAfter.sub(balanceBefore);\\n        emit Locked(address(token), msg.sender, actualAmount, recipient);\\n    }\\n\\n    function execute(bytes memory rlpdata) internal returns (uint256 events) {\\n        RLPReader.RLPItem memory stacks = rlpdata.toRlpItem();\\n        RLPReader.RLPItem[] memory receipt = stacks.toList();\\n        // TODO: check txs is revert or not\\n        uint256 postStateOrStatus = receipt[0].toUint();\\n        require(postStateOrStatus == 1, \\\"revert receipt\\\");\\n        RLPReader.RLPItem[] memory logs = receipt[3].toList();\\n        for (uint256 i = 0; i < logs.length; i++) {\\n            RLPReader.RLPItem[] memory rlpLog = logs[i].toList();\\n            address Address = rlpLog[0].toAddress();\\n            if (Address != otherSideBridge) continue;\\n            RLPReader.RLPItem[] memory Topics = rlpLog[1].toList(); // TODO: if is lock event\\n            bytes32[] memory topics = new bytes32[](Topics.length);\\n            for (uint256 j = 0; j < Topics.length; j++) {\\n                topics[j] = bytes32(Topics[j].toUint());\\n            }\\n            bytes memory Data = rlpLog[2].toBytes();\\n            if (topics[0] == lockEventSig) {\\n                onLockEvent(topics, Data);\\n                events++;\\n                continue;\\n            }\\n            if (topics[0] == burnEventSig) {\\n                onBurnEvent(topics, Data);\\n                events++;\\n                continue;\\n            }\\n            if (topics[0] == TokenMapReqEventSig) {\\n                onTokenMapReqEvent(topics, Data);\\n                events++;\\n                continue;\\n            }\\n            if (topics[0] == TokenMapAckEventSig) {\\n                onTokenMapAckEvent(topics);\\n                events++;\\n                continue;\\n            }\\n        }\\n    }\\n\\n    function onBurnEvent(bytes32[] memory topics, bytes memory data) private {\\n        address token = address(uint160(uint256(topics[1])));\\n        //address sender = address(uint160(uint256(topics[2])));\\n        (uint256 amount, address recipient) = abi.decode(\\n            data,\\n            (uint256, address)\\n        );\\n        IERC20Upgradeable lockedToken = TxMappedInv[token];\\n        lockedToken.safeTransfer(recipient, amount);\\n    }\\n\\n    function onLockEvent(bytes32[] memory topics, bytes memory data) private {\\n        address token = address(uint160(uint256(topics[1])));\\n        //address sender = address(uint160(uint256(topics[2])));\\n        (uint256 amount, address recipient) = abi.decode(\\n            data,\\n            (uint256, address)\\n        );\\n        BridgedToken mintToken = RxMapped[token];\\n        require(address(mintToken) != address(0));\\n        mintToken.mint(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x03a17543b9c54042ddcb4f560579e18f94f02e7147d0c4fe9d3302ff09142700\",\"license\":\"UNLICENSED\"},\"contracts/TokenLockerOnHarmony.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./EthereumLightClient.sol\\\";\\nimport \\\"./EthereumProver.sol\\\";\\nimport \\\"./TokenLocker.sol\\\";\\n\\ncontract TokenLockerOnHarmony is TokenLocker, OwnableUpgradeable {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    EthereumLightClient public lightclient;\\n\\n    mapping(bytes32 => bool) public spentReceipt;\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function changeLightClient(EthereumLightClient newClient)\\n        external\\n        onlyOwner\\n    {\\n        lightclient = newClient;\\n    }\\n\\n    function bind(address otherSide) external onlyOwner {\\n        otherSideBridge = otherSide;\\n    }\\n\\n    function validateAndExecuteProof(\\n        uint256 blockNo,\\n        bytes32 rootHash,\\n        bytes calldata mptkey,\\n        bytes calldata proof\\n    ) external {\\n        bytes32 blockHash = bytes32(lightclient.blocksByHeight(blockNo, 0));\\n        require(\\n            lightclient.VerifyReceiptsHash(blockHash, rootHash),\\n            \\\"wrong receipt hash\\\"\\n        );\\n        bytes32 receiptHash = keccak256(\\n            abi.encodePacked(blockHash, rootHash, mptkey)\\n        );\\n        require(spentReceipt[receiptHash] == false, \\\"double spent!\\\");\\n        bytes memory rlpdata = EthereumProver.validateMPTProof(\\n            rootHash,\\n            mptkey,\\n            proof\\n        );\\n        spentReceipt[receiptHash] = true;\\n        uint256 executedEvents = execute(rlpdata);\\n        require(executedEvents > 0, \\\"no valid event\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc0feda130194ea67100e5cbb225398b4ad85d1fc505b0267cd799c93d19462d9\",\"license\":\"UNLICENSED\"},\"contracts/TokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/RLPReader.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n// import \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./BridgedToken.sol\\\";\\n\\ncontract TokenRegistry {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    event TokenMapReq(\\n        address indexed tokenReq,\\n        uint8 indexed decimals,\\n        string name,\\n        string symbol\\n    );\\n\\n    event TokenMapAck(address indexed tokenReq, address indexed tokenAck);\\n\\n    bytes32 constant TokenMapReqEventSig =\\n        keccak256(\\\"TokenMapReq(address,uint8,string,string)\\\");\\n    bytes32 constant TokenMapAckEventSig =\\n        keccak256(\\\"TokenMapAck(address,address)\\\");\\n\\n    IERC20Upgradeable[] public TxTokens; // thisSide locked ERC20 list\\n    BridgedToken[] public RxTokens; // bridged token list, keys of\\n\\n    // TX means token issued in this chain, and cross to another chain\\n    mapping(address => address) public TxMapped; // thisSide locked => otherSide mint\\n    mapping(address => IERC20Upgradeable) public TxMappedInv; // inverse KV\\n\\n    // RX means token issued in another chain, and cross to this chain.\\n    mapping(address => BridgedToken) public RxMapped; // otherSide locked => thisSide mint\\n    mapping(address => address) public RxMappedInv; // inverse KV\\n\\n    function totalBridgedTokens() external view returns (uint256, uint256) {\\n        return (TxTokens.length, RxTokens.length);\\n    }\\n\\n    function issueTokenMapReq(ERC20Upgradeable thisSideToken)\\n        external\\n    {\\n        require(\\n            TxMapped[address(thisSideToken)] == address(0),\\n            \\\"token is already mapped\\\"\\n        );\\n        ERC20Upgradeable tokenDetail = thisSideToken;\\n        emit TokenMapReq(\\n            address(thisSideToken),\\n            tokenDetail.decimals(),\\n            tokenDetail.name(),\\n            tokenDetail.symbol()\\n        );\\n    }\\n\\n    function onTokenMapReqEvent(bytes32[] memory topics, bytes memory data)\\n        internal\\n    {\\n        // event TokenMapReq(address indexed tokenReq, uint256 decimals, string name, string symbol);\\n        address tokenReq = address(uint160(uint256(topics[1])));\\n        require(\\n            address(RxMapped[tokenReq]) == address(0),\\n            \\\"bridge already exist\\\"\\n        );\\n        uint8 decimals = uint8(uint256(topics[2]));\\n        (string memory name, string memory symbol) = abi.decode(\\n            data,\\n            (string, string)\\n        );\\n        bytes32 salt = bytes32(uint256(uint160(tokenReq)));\\n        BridgedToken mintAddress = new BridgedToken{salt: salt}();\\n        mintAddress.initialize(\\n            name,\\n            symbol,\\n            decimals\\n        );\\n        RxMappedInv[address(mintAddress)] = tokenReq;\\n        RxMapped[tokenReq] = mintAddress;\\n        RxTokens.push(mintAddress);\\n        emit TokenMapAck(tokenReq, address(mintAddress));\\n    }\\n\\n    function onTokenMapAckEvent(bytes32[] memory topics)\\n        internal\\n    {\\n        address tokenReq = address(uint160(uint256(topics[1])));\\n        address tokenAck = address(uint160(uint256(topics[2])));\\n        require(\\n            TxMapped[tokenReq] == address(0),\\n            \\\"missing mapping to acknowledge\\\"\\n        );\\n        TxMapped[tokenReq] = tokenAck;\\n        TxMappedInv[tokenAck] = IERC20Upgradeable(tokenReq);\\n        TxTokens.push(IERC20Upgradeable(tokenReq));\\n    }\\n}\\n\",\"keccak256\":\"0x63f69fa0ff1363a71f4c04dfdfe8487ecf6b120b1c4c7b37971a52fe87b3090f\",\"license\":\"UNLICENSED\"},\"contracts/ethash/MerkelRoot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract MerkelRoots {\\n    uint64 constant epochStart = 404;\\n    uint64 constant epochEnd = 404;\\n    bytes constant ROOTS = \\\"\\\\xeb\\\\xe5\\\\x0d\\\\xbd\\\\x91\\\\x67\\\\x46\\\\xb5\\\\x6e\\\\x58\\\\x86\\\\x9e\\\\x26\\\\x48\\\\x5d\\\\x14\\\\x0f\\\\x92\\\\x86\\\\x6d\\\\x59\\\\xfb\\\\xb8\\\\x94\\\\x40\\\\x5d\\\\x8c\\\\x7e\\\\xf0\\\\x7b\\\\x10\\\\x86\\\";\\n\\n   function getRootHash(uint64 epoch) internal pure returns(bytes32 hash) {\\n       bytes memory roots = ROOTS;\\n       require(epoch >= epochStart && epoch <= epochEnd, \\\"epoch out of range!\\\");\\n       uint256 index = epoch - epochStart + 1; // skip length\\n       assembly{\\n           hash := mload(add(roots, mul(index, 0x20)))\\n       }\\n   }\\n}\",\"keccak256\":\"0x3a24fdb008e080407747bd4a1621d58d8f05625a45c26b03b8d41c0885a497c2\",\"license\":\"UNLICENSED\"},\"contracts/ethash/Prime.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// from https://gist.github.com/lhartikk/c7bbc120aa8e58a0e0e781edb9a90497\\nlibrary Prime {\\n    // miller rabin test\\n    function probablyPrime(uint256 n, uint256 prime)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (n == 2 || n == 3) {\\n            return true;\\n        }\\n\\n        if (n % 2 == 0 || n < 2) {\\n            return false;\\n        }\\n\\n        uint256[2] memory values = getValues(n);\\n        uint256 s = values[0];\\n        uint256 d = values[1];\\n\\n        uint256 x = fastModularExponentiation(prime, d, n);\\n\\n        if (x == 1 || x == n - 1) {\\n            return true;\\n        }\\n\\n        for (uint256 i = s - 1; i > 0; i--) {\\n            x = fastModularExponentiation(x, 2, n);\\n            if (x == 1) {\\n                return false;\\n            }\\n            if (x == n - 1) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function fastModularExponentiation(\\n        uint256 a,\\n        uint256 b,\\n        uint256 n\\n    ) internal pure returns (uint256) {\\n        a = a % n;\\n        uint256 result = 1;\\n        uint256 x = a;\\n\\n        while (b > 0) {\\n            uint256 leastSignificantBit = b % 2;\\n            b = b / 2;\\n\\n            if (leastSignificantBit == 1) {\\n                result = result * x;\\n                result = result % n;\\n            }\\n            x = mul(x, x);\\n            x = x % n;\\n        }\\n        return result;\\n    }\\n\\n    // Write (n - 1) as 2^s * d\\n    function getValues(uint256 n) internal pure returns (uint256[2] memory) {\\n        uint256 s = 0;\\n        uint256 d = n - 1;\\n        while (d % 2 == 0) {\\n            d = d / 2;\\n            s++;\\n        }\\n        uint256[2] memory ret;\\n        ret[0] = s;\\n        ret[1] = d;\\n        return ret;\\n    }\\n\\n    // copied from openzeppelin\\n    // https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xa25f0369aa7b3ba489c6ef0d863539b444e602e719d39d5e24fb12a1cd06680f\",\"license\":\"UNLICENSED\"},\"contracts/ethash/binary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LittleEndian {\\n    using LittleEndian for bytes;\\n\\n    function reverse(uint32 num) internal pure returns (uint32) {\\n        return\\n            (num >> 24) |\\n            ((num >> 8) & 0xff00) |\\n            ((num << 8) & 0xff0000) |\\n            ((num << 24) & 0xff000000);\\n    }\\n\\n    function PutUint32(\\n        bytes memory dst,\\n        uint32 offset,\\n        uint32 data\\n    ) internal pure {\\n        assembly {\\n            let memPtr := add(dst, add(offset, 0x20))\\n            mstore8(memPtr, data)\\n            mstore8(add(memPtr, 1), shr(8, data))\\n            mstore8(add(memPtr, 2), shr(16, data))\\n            mstore8(add(memPtr, 3), shr(24, data))\\n        }\\n        /*\\n        dst[offset] = byte(uint8(data));\\n        dst[offset+1] = byte(uint8(data>>8));\\n        dst[offset+2] = byte(uint8(data>>16));\\n        dst[offset+3] = byte(uint8(data>>24));*/\\n    }\\n\\n    function Uint32(bytes memory src, uint32 offset)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        uint256 num;\\n        assembly {\\n            let memPtr := add(src, add(offset, 0x4)) // offset + 0x20 - (32-4)\\n            num := mload(memPtr)\\n        }\\n        return reverse(uint32(num));\\n        //return uint32(uint8(src[offset+3]))<<24 | uint32(uint8(src[offset+2]))<<16 | uint32(uint8(src[offset+1]))<<8 | uint32(uint8(src[offset]));\\n    }\\n\\n    function PutUint64(\\n        bytes memory dst,\\n        uint32 offset,\\n        uint64 data\\n    ) internal pure {\\n        dst.PutUint32(offset + 0, uint32(data));\\n        dst.PutUint32(offset + 4, uint32(data >> 32));\\n    }\\n\\n    function copyBytes32(\\n        bytes memory dst,\\n        uint32 offset,\\n        bytes32 data\\n    ) internal pure {\\n        assembly {\\n            let memPtr := add(dst, add(offset, 0x20))\\n            mstore(memPtr, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3a1476c6271cb11a6d6c319bbfae02b707f1ea07a75c611f4e00ee43b49f9d\",\"license\":\"UNLICENSED\"},\"contracts/ethash/ethash.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./binary.sol\\\";\\nimport \\\"./keccak512.sol\\\";\\nimport \\\"./Prime.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\nimport \\\"./MerkelRoot.sol\\\"; // npm run merkelInit\\n\\ncontract Ethash is MerkelRoots {\\n    using LittleEndian for bytes;\\n    using Keccak512 for bytes;\\n    using Prime for uint256;\\n\\n    uint32 constant hashWords = 16;\\n    uint32 constant hashBytes = 64;\\n    uint32 constant datasetParents = 256;\\n    uint32 constant mixBytes = 128; // Width of mix\\n    uint32 constant loopAccesses = 64; // Number of accesses in hashimoto loop\\n    uint256 constant MAX256 =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    uint256 constant DATASET_BYTES_INIT = 1073741824;\\n    uint256 constant DATASET_BYTES_GROWTH = 8388608; // 2 ^ 23\\n    uint256 constant EPOCH_LENGTH = 30000;\\n\\n    function getFullSize(uint256 epoc) private pure returns (uint256) {\\n        uint256 sz = DATASET_BYTES_INIT + (DATASET_BYTES_GROWTH) * epoc;\\n        sz -= mixBytes;\\n        while (!(sz / mixBytes).probablyPrime(2)) {\\n            sz -= 2 * mixBytes;\\n        }\\n        return sz;\\n    }\\n\\n    // fnv is an algorithm inspired by the FNV hash, which in some cases is used as\\n    // a non-associative substitute for XOR. Note that we multiply the prime with\\n    // the full 32-bit input, in contrast with the FNV-1 spec which multiplies the\\n    // prime with one byte (octet) in turn.\\n    function fnv(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return (a * 0x01000193) ^ b;\\n    }\\n\\n    // fnvHash mixes in data into mix using the ethash fnv method.\\n    function fnvHash32(uint32[] memory mix, uint32[] memory data)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            let mixOffset := add(mix, 0x20)\\n            let mixValue := mload(mixOffset)\\n            let dataOffset := add(data, 0x20)\\n            let dataValue := mload(dataOffset)\\n\\n            // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n            let fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 2\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 3\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 4\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 5\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 6\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 7\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 2\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 3\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 4\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 5\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 6\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 7\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n            // ---- 1\\n            dataOffset := add(dataOffset, 0x20)\\n            dataValue := mload(dataOffset)\\n            mixOffset := add(mixOffset, 0x20)\\n            mixValue := mload(mixOffset)\\n            fnvValue := and(\\n                xor(mul(mixValue, 0x01000193), dataValue),\\n                0xFFFFFFFF\\n            )\\n            mstore(mixOffset, fnvValue)\\n        }\\n    }\\n\\n    // hashimoto aggregates data from the full dataset in order to produce our final\\n    // value for a particular header hash and nonce.\\n    function hashimoto(\\n        bytes32 hash,\\n        uint64 nonce,\\n        uint64 size,\\n        bytes32[4][loopAccesses] memory cache,\\n        bytes32 rootHash,\\n        bytes32[][loopAccesses] memory proofs\\n    ) private pure returns (bytes32, bytes32) {\\n        // Calculate the number of theoretical rows (we use one buffer nonetheless)\\n        uint32 rows = uint32(size / mixBytes);\\n\\n        // Combine header+nonce into a 64 byte seed\\n        bytes memory seed = new bytes(40);\\n        seed.copyBytes32(0, hash);\\n        seed.PutUint64(32, nonce);\\n\\n        seed = seed.sha3_512();\\n        uint32 seedHead = seed.Uint32(0);\\n\\n        // Start the mix with replicated seed\\n        uint32[] memory mix = new uint32[](mixBytes / 4);\\n        for (uint32 i = 0; i < mix.length; i++) {\\n            mix[i] = seed.Uint32((i % 16) * 4);\\n        }\\n        // Mix in random dataset nodes\\n        uint32[] memory temp = new uint32[](mix.length);\\n\\n        bytes32 root = rootHash;\\n        for (uint32 i = 0; i < loopAccesses; i++) {\\n            uint32 parent = fnv(i ^ seedHead, mix[i % mix.length]) % rows;\\n            //bytes32[4] memory dag = cache[2*parent];\\n            bytes32[4] memory dag = cache[i];\\n            uint256 dagIndex = 2 * parent;\\n            bytes32[] memory proof = proofs[i];\\n            bytes32 leafHash = keccak256(abi.encodePacked(dagIndex, dag));\\n            MerkleProofUpgradeable.verify(proof, root, leafHash);\\n            for (uint32 j = 0; j < dag.length; j++) {\\n                uint32 k = j * 8;\\n                uint256 data = uint256(dag[j]);\\n                temp[k] = LittleEndian.reverse(uint32(data >> (7 * 32)));\\n                temp[k + 1] = LittleEndian.reverse(uint32(data >> (6 * 32)));\\n                temp[k + 2] = LittleEndian.reverse(uint32(data >> (5 * 32)));\\n                temp[k + 3] = LittleEndian.reverse(uint32(data >> (4 * 32)));\\n                temp[k + 4] = LittleEndian.reverse(uint32(data >> (3 * 32)));\\n                temp[k + 5] = LittleEndian.reverse(uint32(data >> (2 * 32)));\\n                temp[k + 6] = LittleEndian.reverse(uint32(data >> (1 * 32)));\\n                temp[k + 7] = LittleEndian.reverse(uint32(data >> (0 * 32)));\\n            }\\n            fnvHash32(mix, temp);\\n        }\\n\\n        // Compress mix\\n        for (uint32 i = 0; i < mix.length; i += 4) {\\n            mix[i / 4] = fnv(\\n                fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]),\\n                mix[i + 3]\\n            );\\n        }\\n        //mix = mix[:len(mix)/4];\\n        uint256 digest = 0;\\n        for (uint32 i = 0; i < mix.length / 4; i++) {\\n            //binary.LittleEndian.PutUint32(digest[i*4:], val)\\n            digest <<= 32;\\n            uint32 val = mix[i];\\n            digest |= uint256(\\n                ((val & 0xff) << 24) |\\n                    (((val >> 8) & 0xff) << 16) |\\n                    (((val >> 16) & 0xff) << 8) |\\n                    (val >> 24)\\n            );\\n        }\\n        return (bytes32(digest), keccak256(abi.encodePacked(seed, digest)));\\n    }\\n\\n    function verifyEthash(\\n        bytes32 hash,\\n        uint64 nonce,\\n        uint64 number,\\n        bytes32[4][loopAccesses] memory cache,\\n        bytes32[][loopAccesses] memory proofs,\\n        uint256 difficulty,\\n        uint256 mixHash\\n    ) public pure returns (bool) {\\n        uint256 epoch = number / EPOCH_LENGTH;\\n        bytes32 rootHash = getRootHash(uint64(epoch));\\n        uint256 size = getFullSize(epoch);\\n        (bytes32 mix, bytes32 _diff) = hashimoto(\\n            hash,\\n            nonce,\\n            uint64(size),\\n            cache,\\n            rootHash,\\n            proofs\\n        );\\n        uint256 target = MAX256 / difficulty; // target = (2**256)/difficult;\\n        target += ((MAX256 % difficulty) + 1) / difficulty;\\n        return\\n            mix == bytes32(mixHash) &&\\n            difficulty > 1 &&\\n            target > uint256(_diff);\\n    }\\n}\\n\",\"keccak256\":\"0x7bbbdf84ce8b36a28fc7f67d8144434ca19051f3706cf2d1053d15bee3f5624d\",\"license\":\"UNLICENSED\"},\"contracts/ethash/keccak512.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./binary.sol\\\";\\n\\nlibrary Keccak512 {\\n    using LittleEndian for bytes;\\n\\n    function keccak_f(uint256[25] memory A)\\n        private\\n        pure\\n        returns (uint256[25] memory)\\n    {\\n        uint256[5] memory C;\\n        uint256[5] memory D;\\n        //uint x;\\n        //uint y;\\n        //uint D_0; uint D_1; uint D_2; uint D_3; uint D_4;\\n        uint256[25] memory B;\\n\\n        uint256[24] memory RC = [\\n            uint256(0x0000000000000001),\\n            0x0000000000008082,\\n            0x800000000000808A,\\n            0x8000000080008000,\\n            0x000000000000808B,\\n            0x0000000080000001,\\n            0x8000000080008081,\\n            0x8000000000008009,\\n            0x000000000000008A,\\n            0x0000000000000088,\\n            0x0000000080008009,\\n            0x000000008000000A,\\n            0x000000008000808B,\\n            0x800000000000008B,\\n            0x8000000000008089,\\n            0x8000000000008003,\\n            0x8000000000008002,\\n            0x8000000000000080,\\n            0x000000000000800A,\\n            0x800000008000000A,\\n            0x8000000080008081,\\n            0x8000000000008080,\\n            0x0000000080000001,\\n            0x8000000080008008\\n        ];\\n\\n        for (uint256 i = 0; i < 24; i++) {\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                C[x] = A[5*x]^A[5*x+1]^A[5*x+2]^A[5*x+3]^A[5*x+4];\\n            }*/\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                D[x] = C[(x+4)%5]^((C[(x+1)%5] * 2)&0xffffffffffffffff | (C[(x+1)%5]/(2**63)));\\n            }*/\\n\\n            D[0] =\\n                C[4] ^\\n                (((C[1] * 2) & 0xffffffffffffffff) | (C[1] / (2**63)));\\n            D[1] =\\n                C[0] ^\\n                (((C[2] * 2) & 0xffffffffffffffff) | (C[2] / (2**63)));\\n            D[2] =\\n                C[1] ^\\n                (((C[3] * 2) & 0xffffffffffffffff) | (C[3] / (2**63)));\\n            D[3] =\\n                C[2] ^\\n                (((C[4] * 2) & 0xffffffffffffffff) | (C[4] / (2**63)));\\n            D[4] =\\n                C[3] ^\\n                (((C[0] * 2) & 0xffffffffffffffff) | (C[0] / (2**63)));\\n\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                for( y = 0 ; y < 5 ; y++ ) {\\n                    A[5*x+y] = A[5*x+y] ^ D[x];\\n                }\\n            }*/\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = (((A[1] * (2**36)) & 0xffffffffffffffff) | (A[1] / (2**28)));\\n            B[11] = (((A[2] * (2**3)) & 0xffffffffffffffff) | (A[2] / (2**61)));\\n            B[19] = (((A[3] * (2**41)) & 0xffffffffffffffff) |\\n                (A[3] / (2**23)));\\n            B[22] = (((A[4] * (2**18)) & 0xffffffffffffffff) |\\n                (A[4] / (2**46)));\\n            B[2] = (((A[5] * (2**1)) & 0xffffffffffffffff) | (A[5] / (2**63)));\\n            B[5] = (((A[6] * (2**44)) & 0xffffffffffffffff) | (A[6] / (2**20)));\\n            B[13] = (((A[7] * (2**10)) & 0xffffffffffffffff) |\\n                (A[7] / (2**54)));\\n            B[16] = (((A[8] * (2**45)) & 0xffffffffffffffff) |\\n                (A[8] / (2**19)));\\n            B[24] = (((A[9] * (2**2)) & 0xffffffffffffffff) | (A[9] / (2**62)));\\n            B[4] = (((A[10] * (2**62)) & 0xffffffffffffffff) |\\n                (A[10] / (2**2)));\\n            B[7] = (((A[11] * (2**6)) & 0xffffffffffffffff) |\\n                (A[11] / (2**58)));\\n            B[10] = (((A[12] * (2**43)) & 0xffffffffffffffff) |\\n                (A[12] / (2**21)));\\n            B[18] = (((A[13] * (2**15)) & 0xffffffffffffffff) |\\n                (A[13] / (2**49)));\\n            B[21] = (((A[14] * (2**61)) & 0xffffffffffffffff) |\\n                (A[14] / (2**3)));\\n            B[1] = (((A[15] * (2**28)) & 0xffffffffffffffff) |\\n                (A[15] / (2**36)));\\n            B[9] = (((A[16] * (2**55)) & 0xffffffffffffffff) |\\n                (A[16] / (2**9)));\\n            B[12] = (((A[17] * (2**25)) & 0xffffffffffffffff) |\\n                (A[17] / (2**39)));\\n            B[15] = (((A[18] * (2**21)) & 0xffffffffffffffff) |\\n                (A[18] / (2**43)));\\n            B[23] = (((A[19] * (2**56)) & 0xffffffffffffffff) |\\n                (A[19] / (2**8)));\\n            B[3] = (((A[20] * (2**27)) & 0xffffffffffffffff) |\\n                (A[20] / (2**37)));\\n            B[6] = (((A[21] * (2**20)) & 0xffffffffffffffff) |\\n                (A[21] / (2**44)));\\n            B[14] = (((A[22] * (2**39)) & 0xffffffffffffffff) |\\n                (A[22] / (2**25)));\\n            B[17] = (((A[23] * (2**8)) & 0xffffffffffffffff) |\\n                (A[23] / (2**56)));\\n            B[20] = (((A[24] * (2**14)) & 0xffffffffffffffff) |\\n                (A[24] / (2**50)));\\n\\n            /*Xi state*/\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                for( y = 0 ; y < 5 ; y++ ) {\\n                    A[5*x+y] = B[5*x+y]^((~B[5*((x+1)%5)+y]) & B[5*((x+2)%5)+y]);\\n                }\\n            }*/\\n\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n    function sponge(uint256[9] memory M)\\n        private\\n        pure\\n        returns (uint256[16] memory)\\n    {\\n        //require( (M.length * 8) == 72 );\\n        //M[7] = 0x01;\\n        //M[8] = 0x8000000000000001;\\n\\n        uint256 r = 72;\\n        uint256 w = 8;\\n        uint256 size = M.length * 8;\\n\\n        uint256[25] memory S;\\n        uint256 i;\\n        uint256 y;\\n        uint256 x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint256[16] memory result;\\n        uint256 b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    /*\\n    address constant KECCAK512 = address(uint160(0x10001));\\n    function keccak512(bytes memory data) view private returns(bytes memory) {\\n        (bool success, bytes memory hash) = KECCAK512.staticcall(data);\\n        require(success, string(hash));\\n        return hash;\\n    }\\n\\n   function sha3_512(bytes memory data) view public returns(bytes memory) {\\n       return keccak512(data);\\n   }\\n*/\\n    function sha3_512(bytes memory data) internal pure returns (bytes memory) {\\n        require(\\n            data.length == 40 || data.length == 64,\\n            \\\"sha512 only support 64 or 40 bytes\\\"\\n        );\\n        uint256 dataWords = data.length / 8;\\n        uint256[9] memory M;\\n        for (uint256 i = 0; i < dataWords; i++) {\\n            uint256 dataOffset = i * 8;\\n            M[i] =\\n                uint256(uint8(data[dataOffset])) |\\n                (uint256(uint8(data[dataOffset + 1])) << 8) |\\n                (uint256(uint8(data[dataOffset + 2])) << 16) |\\n                (uint256(uint8(data[dataOffset + 3])) << 24) |\\n                (uint256(uint8(data[dataOffset + 4])) << 32) |\\n                (uint256(uint8(data[dataOffset + 5])) << 40) |\\n                (uint256(uint8(data[dataOffset + 6])) << 48) |\\n                (uint256(uint8(data[dataOffset + 7])) << 56);\\n        }\\n        M[dataWords] = 1;\\n        M[8] |= 0x8000000000000000;\\n        uint256[16] memory result32 = sponge(M);\\n        bytes memory resultBytes = new bytes(64);\\n        for (uint32 i = 0; i < result32.length; i++) {\\n            resultBytes.PutUint32(i * 4, uint32(result32[i]));\\n        }\\n        return resultBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x3b49b69d0232051389a9a429b406e86e1cef1411258a177e3d702967b4113161\",\"license\":\"UNLICENSED\"},\"contracts/lib/EthUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Created on 2019-12-28\\n * @summary: The EthUtils library contains utility functions\\n * @author: Tuan Vu (tuanvd@gmail.com)\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EthUtils {\\n    function bytesToBytes32(bytes memory b, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    function hexStrToBytes(string memory _hexStr)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            bytes(_hexStr)[0] != \\\"0\\\" ||\\n            bytes(_hexStr)[1] != \\\"x\\\" ||\\n            bytes(_hexStr).length % 2 != 0 ||\\n            bytes(_hexStr).length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes((bytes(_hexStr).length - 2) / 2);\\n\\n        for (uint256 i = 2; i < bytes(_hexStr).length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(bytes(_hexStr)[i]) >= 48 && uint8(bytes(_hexStr)[i]) <= 57\\n            ) tetrad1 = uint8(bytes(_hexStr)[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(bytes(_hexStr)[i + 1]) >= 48 &&\\n                uint8(bytes(_hexStr)[i + 1]) <= 57\\n            ) tetrad2 = uint8(bytes(_hexStr)[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(bytes(_hexStr)[i]) >= 65 && uint8(bytes(_hexStr)[i]) <= 70\\n            ) tetrad1 = uint8(bytes(_hexStr)[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(bytes(_hexStr)[i + 1]) >= 65 &&\\n                uint8(bytes(_hexStr)[i + 1]) <= 70\\n            ) tetrad2 = uint8(bytes(_hexStr)[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(bytes(_hexStr)[i]) >= 97 &&\\n                uint8(bytes(_hexStr)[i]) <= 102\\n            ) tetrad1 = uint8(bytes(_hexStr)[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(bytes(_hexStr)[i + 1]) >= 97 &&\\n                uint8(bytes(_hexStr)[i + 1]) <= 102\\n            ) tetrad2 = uint8(bytes(_hexStr)[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 1] = bytes1(16 * tetrad1 + tetrad2);\\n        }\\n\\n        return bytes_array;\\n    }\\n}\\n\",\"keccak256\":\"0xdfe26981f5d16e997b2266b9195c6a992726b75281d87703351bd726fdeb2dfa\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) <= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, self)\\n            )\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint256 self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int256 self) internal pure returns (bytes memory) {\\n        return encodeUint(uint256(self));\\n    }\\n\\n    /**\\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint256 len, uint256 offset)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen - i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31)\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xa0058a159fe705052d9b4eef67d83b892111fd0d3ce48174d2ace8474a144358\",\"license\":\"UNLICENSED\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n *   Updated by Tuan Vu (tuanvd@gmail.com)\\n * Please reach out with any questions or concerns\\n */\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n        // return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    function toBytes32(RLPItem memory item) internal pure returns (bytes32) {\\n        return _bytesToBytes32(toBytes(item), 0);\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @param convert a memory bytes to byte32\\n     */\\n    function _bytesToBytes32(bytes memory b, uint256 offset)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n}\\n\",\"keccak256\":\"0x57dc11b8f3863ab41ef5771ccbbc95f969cff8d612e9d87148e66196aaa74342\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613fa1806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638487b9cf116100ad578063cd06c3a111610071578063cd06c3a11461028b578063d650d3f7146102a6578063e05bdaf7146102cf578063e71575e8146102f8578063f2fde38b1461032157600080fd5b80638487b9cf146101f85780638ab3124a146102215780638da5cb5b14610254578063ae24fbb414610265578063bf21980b1461027857600080fd5b806359508f8f116100f457806359508f8f146101af578063715018a6146101c25780637750c9f0146101ca5780638129fc1c146101dd57806381bac14f146101e557600080fd5b80631b7f3e2314610131578063345df1cc1461016157806335c6814d146101765780634ae83c8e146101895780634d2be8e51461019c575b600080fd5b606b54610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017461016f366004612717565b610334565b005b61014461018436600461279a565b6105ed565b6101746101973660046127c8565b610617565b600654610144906001600160a01b031681565b6101746101bd3660046127e5565b610827565b610174610988565b6101746101d83660046127e5565b6109be565b610174610bde565b6101746101f33660046127c8565b610c59565b6101446102063660046127c8565b6005602052600090815260409020546001600160a01b031681565b61024461022f36600461279a565b606c6020526000908152604090205460ff1681565b6040519015158152602001610158565b6039546001600160a01b0316610144565b61014461027336600461279a565b610ca5565b6101746102863660046127c8565b610cb5565b60005460015460408051928352602083019190915201610158565b6101446102b43660046127c8565b6003602052600090815260409020546001600160a01b031681565b6101446102dd3660046127c8565b6004602052600090815260409020546001600160a01b031681565b6101446103063660046127c8565b6002602052600090815260409020546001600160a01b031681565b61017461032f3660046127c8565b610d01565b606b54604051633c6c6b7360e01b815260048101889052600060248201819052916001600160a01b031690633c6c6b739060440160206040518083038186803b15801561038057600080fd5b505afa158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b89190612826565b606b546040516329e141af60e01b815260048101839052602481018990529192506001600160a01b0316906329e141af9060440160206040518083038186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c919061283f565b6104825760405162461bcd60e51b81526020600482015260126024820152710eee4dedcce40e4cac6cad2e0e840d0c2e6d60731b60448201526064015b60405180910390fd5b60008187878760405160200161049b9493929190612861565b60408051601f1981840301815291815281516020928301206000818152606c90935291205490915060ff16156105035760405162461bcd60e51b815260206004820152600d60248201526c646f75626c65207370656e742160981b6044820152606401610479565b60006105798888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250610d9992505050565b6000838152606c60205260408120805460ff1916600117905590915061059e82611212565b9050600081116105e15760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81d985b1a5908195d995b9d60921b6044820152606401610479565b50505050505050505050565b600181815481106105fd57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03818116600090815260026020526040902054161561067f5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20697320616c7265616479206d61707065640000000000000000006044820152606401610479565b6000819050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106bd57600080fd5b505afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190612882565b60ff16826001600160a01b03167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610798919081019061296f565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080d919081019061296f565b60405161081b9291906129d0565b60405180910390a35050565b6001600160a01b03821661087d5760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f206164647265737300000000006044820152606401610479565b6001600160a01b03838116600090815260056020526040902054166108dc5760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610479565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038416906379cc679090604401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050604080518481526001600160a01b038681166020830152339450871692507f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505050565b6039546001600160a01b031633146109b25760405162461bcd60e51b8152600401610479906129fe565b6109bc6000611578565b565b6001600160a01b038216610a145760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f206164647265737300000000006044820152606401610479565b6001600160a01b0383811660009081526002602052604090205416610a735760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610479565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190612826565b9050610b046001600160a01b0385163330856115ca565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015610b4657600080fd5b505afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e9190612826565b90506000610b8c828461163b565b604080518281526001600160a01b03888116602083015292935033928916917f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd69910160405180910390a3505050505050565b6000610bea6001611650565b90508015610c06576006805460ff60a81b1916600160a81b1790555b610c0e6116ed565b8015610c56576006805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6039546001600160a01b03163314610c835760405162461bcd60e51b8152600401610479906129fe565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600081815481106105fd57600080fd5b6039546001600160a01b03163314610cdf5760405162461bcd60e51b8152600401610479906129fe565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b03163314610d2b5760405162461bcd60e51b8152600401610479906129fe565b6001600160a01b038116610d905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610479565b610c5681611578565b60606000610dd6610dd18460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61171e565b9050610de58460006001611834565b9350600080606080610e0a604051806040016040528060008152602001600081525090565b8551610e59577f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218a14610e3c57600080fd5b5050604080516000815260208101909152945061120b9350505050565b60005b865181101561120357610e87878281518110610e7a57610e7a612a33565b6020026020010151611a2f565b935080158015610e9d5750835160208501208b14155b15610ea757600080fd5b8015801590610ebe5750610eba84611aaf565b8514155b15610ec857600080fd5b610eea878281518110610edd57610edd612a33565b602002602001015161171e565b925082516002141561109b5760006060610f25610f2086600081518110610f1357610f13612a33565b6020026020010151611b12565b611bb8565b90925090506000610f37898e84611c66565b9050610f43818a612a5f565b98508151811015610fa75760018a51610f5c9190612a77565b841015610f6857600080fd5b60005b6040519080825280601f01601f191660200182016040528015610f95576020820181803683370190505b509a505050505050505050505061120b565b821561100e5760018a51610fbb9190612a77565b841015610fc757600080fd5b8c51891015610fd7576000610f6b565b85600181518110610fea57610fea612a33565b60200260200101519450610ffd85611b12565b9a505050505050505050505061120b565b60018a5161101c9190612a77565b84141561102857600080fd5b61104b8660018151811061103e5761103e612a33565b6020026020010151611cf9565b6110735761106586600181518110610f1357610f13612a33565b805190602001209750611093565b61108986600181518110610e7a57610e7a612a33565b8051906020012097505b5050506111f1565b8251601114156111f157895186146111b45760008a87815181106110c1576110c1612a33565b016020015160f81c90506110d6600188612a5f565b965060108160ff16106110e857600080fd5b61110d848260ff168151811061110057611100612a33565b6020026020010151611d32565b1561114a57600188516111209190612a77565b821461112b57600080fd5b5050604080516000815260208101909152965061120b95505050505050565b611162848260ff168151811061103e5761103e612a33565b61118c5761117e848260ff1681518110610f1357610f13612a33565b8051906020012095506111ae565b6111a4848260ff1681518110610e7a57610e7a612a33565b8051906020012095505b506111f1565b600187516111c29190612a77565b81146111cd57600080fd5b6111e383601081518110610f1357610f13612a33565b97505050505050505061120b565b806111fb81612a8e565b915050610e5c565b505050505050505b9392505050565b6000806112468360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006112538261171e565b9050600061127a8260008151811061126d5761126d612a33565b6020026020010151611d55565b9050806001146112bd5760405162461bcd60e51b815260206004820152600e60248201526d1c995d995c9d081c9958d95a5c1d60921b6044820152606401610479565b60006112d583600381518110610edd57610edd612a33565b905060005b815181101561156e5760006112fa838381518110610edd57610edd612a33565b905060006113218260008151811061131457611314612a33565b6020026020010151611dce565b6006549091506001600160a01b0380831691161461134057505061155c565b600061135883600181518110610edd57610edd612a33565b90506000815167ffffffffffffffff811115611376576113766128a5565b60405190808252806020026020018201604052801561139f578160200160208202803683370190505b50905060005b82518110156113f5576113c383828151811061126d5761126d612a33565b60001b8282815181106113d8576113d8612a33565b6020908102919091010152806113ed81612a8e565b9150506113a5565b50600061140e85600281518110610f1357610f13612a33565b90507f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd698260008151811061144457611444612a33565b602002602001015114156114735761145c8282611de8565b8a61146681612a8e565b9b5050505050505061155c565b7f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373826000815181106114a7576114a7612a33565b602002602001015114156114bf5761145c8282611eaa565b7fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42826000815181106114f3576114f3612a33565b6020026020010151141561150b5761145c8282611f17565b7f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d38260008151811061153f5761153f612a33565b602002602001015114156115565761145c82612129565b50505050505b8061156681612a8e565b9150506112da565b5050505050919050565b603980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526116359085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612257565b50505050565b60006116478284612a77565b90505b92915050565b600654600090600160a81b900460ff161561169b578160ff1660011480156116775750303b155b6116935760405162461bcd60e51b815260040161047990612aa9565b506000919050565b60065460ff808416600160a01b90920416106116c95760405162461bcd60e51b815260040161047990612aa9565b506006805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b600654600160a81b900460ff166117165760405162461bcd60e51b815260040161047990612af7565b6109bc61232e565b606061172982611cf9565b61173257600080fd5b600061173d83612360565b905060008167ffffffffffffffff81111561175a5761175a6128a5565b60405190808252806020026020018201604052801561179f57816020015b60408051808201909152600080825260208201528152602001906001900390816117785790505b50905060006117b185602001516123e3565b85602001516117c09190612a5f565b90506000805b84811015611829576117d78361245e565b915060405180604001604052808381526020018481525084828151811061180057611800612a33565b60209081029190910101526118158284612a5f565b92508061182181612a8e565b9150506117c6565b509195945050505050565b6060600084511161184457600080fd5b6000845160026118549190612b42565b90508084111561186357600080fd5b61186d8482612a77565b90506118798382612a5f565b67ffffffffffffffff811115611891576118916128a5565b6040519080825280601f01601f1916602001820160405280156118bb576020820181803683370190505b509150826001141561190357601060f81b82600184516118db9190612a77565b815181106118eb576118eb612a33565b60200101906001600160f81b031916908160001a9053505b6000845b6119118387612a5f565b811015611a0c57611923600282612b77565b61198c57600487611935600284612b8b565b8151811061194557611945612a33565b602001015160f81c60f81b60f81c60ff16901c600f1660f81b84838151811061197057611970612a33565b60200101906001600160f81b031916908160001a9053506119ed565b60008761199a600284612b8b565b815181106119aa576119aa612a33565b602001015160f81c60f81b60f81c60ff16901c600f1660f81b8483815181106119d5576119d5612a33565b60200101906001600160f81b031916908160001a9053505b6119f8600183612a5f565b9150611a05600182612a5f565b9050611907565b508251611a198583612a5f565b14611a2657611a26612b9f565b50509392505050565b60606000826000015167ffffffffffffffff811115611a5057611a506128a5565b6040519080825280601f01601f191660200182016040528015611a7a576020820181803683370190505b509050805160001415611a8d5792915050565b6000816020019050611aa88460200151828660000151612502565b5092915050565b6000602082511015611ac75750805160209091012090565b81604051602001611ad89190612bb5565b60408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050919050565b8051606090611b2057600080fd5b6000611b2f83602001516123e3565b90506000818460000151611b439190612a77565b905060008167ffffffffffffffff811115611b6057611b606128a5565b6040519080825280601f01601f191660200182016040528015611b8a576020820181803683370190505b5090506000816020019050611baf848760200151611ba89190612a5f565b8285612502565b50949350505050565b600060606000835111611bca57600080fd5b6000600484600081518110611be157611be1612a33565b60209101015160f81c901c600f169050600081611c045750600092506002611c3e565b8160011415611c195750600092506001611c3e565b8160021415611c2e5750600192506002611c3e565b816003141561012c575060019250825b83611c5b868387611c50576000611c53565b60015b60ff16611834565b935093505050915091565b6000805b8351611c768683612a5f565b108015611c835750825181105b15611cf157828181518110611c9a57611c9a612a33565b01602001516001600160f81b03191684611cb48784612a5f565b81518110611cc457611cc4612a33565b01602001516001600160f81b03191614611cdf57905061120b565b80611ce981612a8e565b915050611c6a565b949350505050565b8051600090611d0a57506000919050565b6020820151805160001a9060c0821015611d28575060009392505050565b5060019392505050565b8051600090600114611d4657506000919050565b50602001515160001a60801490565b805160009015801590611d6a57508151602110155b611d7357600080fd5b6000611d8283602001516123e3565b90506000818460000151611d969190612a77565b9050600080838660200151611dab9190612a5f565b9050805191506020831015611baf57506020919091036101000a90049392505050565b8051600090601514611ddf57600080fd5b61164a82611d55565b600082600181518110611dfd57611dfd612a33565b602002602001015160001c905060008083806020019051810190611e219190612bd1565b6001600160a01b038086166000908152600460205260409020549294509092501680611e4c57600080fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018590528216906340c10f1990604401600060405180830381600087803b158015611e9657600080fd5b505af11580156105e1573d6000803e3d6000fd5b600082600181518110611ebf57611ebf612a33565b602002602001015160001c905060008083806020019051810190611ee39190612bd1565b6001600160a01b0380861660009081526003602052604090205492945090925016611f0f81838561257d565b505050505050565b600082600181518110611f2c57611f2c612a33565b6020908102919091018101516001600160a01b03808216600090815260049093526040909220549092501615611f9b5760405162461bcd60e51b8152602060048201526014602482015273189c9a5919d948185b1c9958591e48195e1a5cdd60621b6044820152606401610479565b600083600281518110611fb057611fb0612a33565b602002602001015160001c905060008084806020019051810190611fd49190612c01565b60405191935091506001600160a01b038516906000908290611ff5906126c1565b8190604051809103906000f5905080158015612015573d6000803e3d6000fd5b50604051630b127b6360e11b81529091506001600160a01b03821690631624f6c69061204990879087908a90600401612c65565b600060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b5050506001600160a01b0380831660008181526005602090815260408083208054958d166001600160a01b03199687168117909155808452600490925280832080548616851790556001805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909516841790945592519193507f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d391a35050505050505050565b60008160018151811061213e5761213e612a33565b602002602001015160001c905060008260028151811061216057612160612a33565b6020908102919091018101516001600160a01b038481166000908152600290935260409092205490925016156121d85760405162461bcd60e51b815260206004820152601e60248201527f6d697373696e67206d617070696e6720746f2061636b6e6f776c6564676500006044820152606401610479565b6001600160a01b0391821660008181526002602090815260408083208054969095166001600160a01b0319968716811790955593825260039052918220805484168217905581546001810183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101805490921617905550565b60006122ac826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125ad9092919063ffffffff16565b80519091501561232957808060200190518101906122ca919061283f565b6123295760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610479565b505050565b600654600160a81b900460ff166123575760405162461bcd60e51b815260040161047990612af7565b6109bc33611578565b805160009061237157506000919050565b60008061238184602001516123e3565b84602001516123909190612a5f565b90506000846000015185602001516123a89190612a5f565b90505b808210156123da576123bc8261245e565b6123c69083612a5f565b9150826123d281612a8e565b9350506123ab565b50909392505050565b8051600090811a60808110156123fc5750600092915050565b60b8811080612417575060c08110801590612417575060f881105b156124255750600192915050565b60c08110156124525761243a600160b8612c9e565b6124479060ff1682612a77565b61120b906001612a5f565b61243a600160f8612c9e565b80516000908190811a60808110156124795760019150611aa8565b60b881101561249f5761248d608082612a77565b612498906001612a5f565b9150611aa8565b60c08110156124cc5760b78103600185019450806020036101000a85510460018201810193505050611aa8565b60f88110156124e05761248d60c082612a77565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8061250c57505050565b602081106125445782518252612523602084612a5f565b9250612530602083612a5f565b915061253d602082612a77565b905061250c565b60006001612553836020612a77565b61255f90610100612da5565b6125699190612a77565b935183518516941916939093179091525050565b6040516001600160a01b03831660248201526044810182905261232990849063a9059cbb60e01b906064016115fe565b6060611cf18484600085856001600160a01b0385163b61260f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610479565b600080866001600160a01b0316858760405161262b9190612bb5565b60006040518083038185875af1925050503d8060008114612668576040519150601f19603f3d011682016040523d82523d6000602084013e61266d565b606091505b509150915061267d828286612688565b979650505050505050565b6060831561269757508161120b565b8251156126a75782518084602001fd5b8160405162461bcd60e51b81526004016104799190612db1565b6111a780612dc583390190565b60008083601f8401126126e057600080fd5b50813567ffffffffffffffff8111156126f857600080fd5b60208301915083602082850101111561271057600080fd5b9250929050565b6000806000806000806080878903121561273057600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561275657600080fd5b6127628a838b016126ce565b9096509450606089013591508082111561277b57600080fd5b5061278889828a016126ce565b979a9699509497509295939492505050565b6000602082840312156127ac57600080fd5b5035919050565b6001600160a01b0381168114610c5657600080fd5b6000602082840312156127da57600080fd5b813561120b816127b3565b6000806000606084860312156127fa57600080fd5b8335612805816127b3565b92506020840135612815816127b3565b929592945050506040919091013590565b60006020828403121561283857600080fd5b5051919050565b60006020828403121561285157600080fd5b8151801515811461120b57600080fd5b84815283602082015281836040830137600091016040019081529392505050565b60006020828403121561289457600080fd5b815160ff8116811461120b57600080fd5b634e487b7160e01b600052604160045260246000fd5b60005b838110156128d65781810151838201526020016128be565b838111156116355750506000910152565b600082601f8301126128f857600080fd5b815167ffffffffffffffff80821115612913576129136128a5565b604051601f8301601f19908116603f0116810190828211818310171561293b5761293b6128a5565b8160405283815286602085880101111561295457600080fd5b6129658460208301602089016128bb565b9695505050505050565b60006020828403121561298157600080fd5b815167ffffffffffffffff81111561299857600080fd5b611cf1848285016128e7565b600081518084526129bc8160208601602086016128bb565b601f01601f19169290920160200192915050565b6040815260006129e360408301856129a4565b82810360208401526129f581856129a4565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612a7257612a72612a49565b500190565b600082821015612a8957612a89612a49565b500390565b6000600019821415612aa257612aa2612a49565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615612b5c57612b5c612a49565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612b8657612b86612b61565b500690565b600082612b9a57612b9a612b61565b500490565b634e487b7160e01b600052600160045260246000fd5b60008251612bc78184602087016128bb565b9190910192915050565b60008060408385031215612be457600080fd5b825191506020830151612bf6816127b3565b809150509250929050565b60008060408385031215612c1457600080fd5b825167ffffffffffffffff80821115612c2c57600080fd5b612c38868387016128e7565b93506020850151915080821115612c4e57600080fd5b50612c5b858286016128e7565b9150509250929050565b606081526000612c7860608301866129a4565b8281036020840152612c8a81866129a4565b91505060ff83166040830152949350505050565b600060ff821660ff841680821015612cb857612cb8612a49565b90039392505050565b600181815b80851115612cfc578160001904821115612ce257612ce2612a49565b80851615612cef57918102915b93841c9390800290612cc6565b509250929050565b600082612d135750600161164a565b81612d205750600061164a565b8160018114612d365760028114612d4057612d5c565b600191505061164a565b60ff841115612d5157612d51612a49565b50506001821b61164a565b5060208310610133831016604e8410600b8410161715612d7f575081810a61164a565b612d898383612cc1565b8060001904821115612d9d57612d9d612a49565b029392505050565b60006116478383612d04565b60208152600061164760208301846129a456fe608060405234801561001057600080fd5b50611187806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461023d578063a457c2d714610245578063a9059cbb14610258578063dd62ed3e1461026b578063f2fde38b1461027e57600080fd5b806370a08231146101de578063715018a61461020757806379cc67901461020f5780638da5cb5b1461022257600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce5671461019657806339509351146101a557806340c10f19146101b857806342966c68146101cb57600080fd5b806306fdde031461011b578063095ea7b3146101395780631624f6c61461015c57806318160ddd14610171575b600080fd5b610123610291565b6040516101309190610da2565b60405180910390f35b61014c610147366004610e0e565b610323565b6040519015158152602001610130565b61016f61016a366004610edb565b61033b565b005b6035545b604051908152602001610130565b61014c610191366004610f59565b6103bd565b60405160128152602001610130565b61014c6101b3366004610e0e565b6103e1565b61016f6101c6366004610e0e565b610403565b61016f6101d9366004610f95565b610444565b6101756101ec366004610fae565b6001600160a01b031660009081526033602052604090205490565b61016f610451565b61016f61021d366004610e0e565b610487565b6097546040516001600160a01b039091168152602001610130565b61012361049c565b61014c610253366004610e0e565b6104ab565b61014c610266366004610e0e565b610526565b610175610279366004610fd0565b610534565b61016f61028c366004610fae565b61055f565b6060603680546102a090611003565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90611003565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050905090565b6000336103318185856105f7565b5060019392505050565b6000610347600161071c565b9050801561035f576000805461ff0019166101001790555b61036984846107a9565b6103716107da565b80156103b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000336103cb858285610801565b6103d6858585610875565b506001949350505050565b6000336103318185856103f48383610534565b6103fe9190611054565b6105f7565b6097546001600160a01b031633146104365760405162461bcd60e51b815260040161042d9061106c565b60405180910390fd5b6104408282610a43565b5050565b61044e3382610b22565b50565b6097546001600160a01b0316331461047b5760405162461bcd60e51b815260040161042d9061106c565b6104856000610c6d565b565b610492823383610801565b6104408282610b22565b6060603780546102a090611003565b600033816104b98286610534565b9050838110156105195760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161042d565b6103d682868684036105f7565b600033610331818585610875565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b031633146105895760405162461bcd60e51b815260040161042d9061106c565b6001600160a01b0381166105ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161042d565b61044e81610c6d565b6001600160a01b0383166106595760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161042d565b6001600160a01b0382166106ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161042d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008054610100900460ff1615610763578160ff16600114801561073f5750303b155b61075b5760405162461bcd60e51b815260040161042d906110a1565b506000919050565b60005460ff80841691161061078a5760405162461bcd60e51b815260040161042d906110a1565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166107d05760405162461bcd60e51b815260040161042d906110ef565b6104408282610cbf565b600054610100900460ff166104855760405162461bcd60e51b815260040161042d906110ef565b600061080d8484610534565b905060001981146103b757818110156108685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042d565b6103b784848484036105f7565b6001600160a01b0383166108d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161042d565b6001600160a01b03821661093b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161042d565b6001600160a01b038316600090815260336020526040902054818110156109b35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161042d565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906109ea908490611054565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a3691815260200190565b60405180910390a36103b7565b6001600160a01b038216610a995760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042d565b8060356000828254610aab9190611054565b90915550506001600160a01b03821660009081526033602052604081208054839290610ad8908490611054565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b825760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161042d565b6001600160a01b03821660009081526033602052604090205481811015610bf65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161042d565b6001600160a01b0383166000908152603360205260408120838303905560358054849290610c2590849061113a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161070f565b505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610ce65760405162461bcd60e51b815260040161042d906110ef565b8151610cf9906036906020850190610d09565b508051610c689060379060208401905b828054610d1590611003565b90600052602060002090601f016020900481019282610d375760008555610d7d565b82601f10610d5057805160ff1916838001178555610d7d565b82800160010185558215610d7d579182015b82811115610d7d578251825591602001919060010190610d62565b50610d89929150610d8d565b5090565b5b80821115610d895760008155600101610d8e565b600060208083528351808285015260005b81811015610dcf57858101830151858201604001528201610db3565b81811115610de1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107a457600080fd5b60008060408385031215610e2157600080fd5b610e2a83610df7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e5f57600080fd5b813567ffffffffffffffff80821115610e7a57610e7a610e38565b604051601f8301601f19908116603f01168101908282118183101715610ea257610ea2610e38565b81604052838152866020858801011115610ebb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610ef057600080fd5b833567ffffffffffffffff80821115610f0857600080fd5b610f1487838801610e4e565b94506020860135915080821115610f2a57600080fd5b50610f3786828701610e4e565b925050604084013560ff81168114610f4e57600080fd5b809150509250925092565b600080600060608486031215610f6e57600080fd5b610f7784610df7565b9250610f8560208501610df7565b9150604084013590509250925092565b600060208284031215610fa757600080fd5b5035919050565b600060208284031215610fc057600080fd5b610fc982610df7565b9392505050565b60008060408385031215610fe357600080fd5b610fec83610df7565b9150610ffa60208401610df7565b90509250929050565b600181811c9082168061101757607f821691505b6020821081141561103857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156110675761106761103e565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561114c5761114c61103e565b50039056fea26469706673582212204876c178a59847c0a2f91832539f910445d9b100e131bcff8637efd66032644964736f6c63430008090033a2646970667358221220f246d1f615d4c0a6c73616db0092b0d0dbf46c0555af139bf8d41b10d0aa5f6c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638487b9cf116100ad578063cd06c3a111610071578063cd06c3a11461028b578063d650d3f7146102a6578063e05bdaf7146102cf578063e71575e8146102f8578063f2fde38b1461032157600080fd5b80638487b9cf146101f85780638ab3124a146102215780638da5cb5b14610254578063ae24fbb414610265578063bf21980b1461027857600080fd5b806359508f8f116100f457806359508f8f146101af578063715018a6146101c25780637750c9f0146101ca5780638129fc1c146101dd57806381bac14f146101e557600080fd5b80631b7f3e2314610131578063345df1cc1461016157806335c6814d146101765780634ae83c8e146101895780634d2be8e51461019c575b600080fd5b606b54610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017461016f366004612717565b610334565b005b61014461018436600461279a565b6105ed565b6101746101973660046127c8565b610617565b600654610144906001600160a01b031681565b6101746101bd3660046127e5565b610827565b610174610988565b6101746101d83660046127e5565b6109be565b610174610bde565b6101746101f33660046127c8565b610c59565b6101446102063660046127c8565b6005602052600090815260409020546001600160a01b031681565b61024461022f36600461279a565b606c6020526000908152604090205460ff1681565b6040519015158152602001610158565b6039546001600160a01b0316610144565b61014461027336600461279a565b610ca5565b6101746102863660046127c8565b610cb5565b60005460015460408051928352602083019190915201610158565b6101446102b43660046127c8565b6003602052600090815260409020546001600160a01b031681565b6101446102dd3660046127c8565b6004602052600090815260409020546001600160a01b031681565b6101446103063660046127c8565b6002602052600090815260409020546001600160a01b031681565b61017461032f3660046127c8565b610d01565b606b54604051633c6c6b7360e01b815260048101889052600060248201819052916001600160a01b031690633c6c6b739060440160206040518083038186803b15801561038057600080fd5b505afa158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b89190612826565b606b546040516329e141af60e01b815260048101839052602481018990529192506001600160a01b0316906329e141af9060440160206040518083038186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c919061283f565b6104825760405162461bcd60e51b81526020600482015260126024820152710eee4dedcce40e4cac6cad2e0e840d0c2e6d60731b60448201526064015b60405180910390fd5b60008187878760405160200161049b9493929190612861565b60408051601f1981840301815291815281516020928301206000818152606c90935291205490915060ff16156105035760405162461bcd60e51b815260206004820152600d60248201526c646f75626c65207370656e742160981b6044820152606401610479565b60006105798888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250610d9992505050565b6000838152606c60205260408120805460ff1916600117905590915061059e82611212565b9050600081116105e15760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81d985b1a5908195d995b9d60921b6044820152606401610479565b50505050505050505050565b600181815481106105fd57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03818116600090815260026020526040902054161561067f5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20697320616c7265616479206d61707065640000000000000000006044820152606401610479565b6000819050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106bd57600080fd5b505afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190612882565b60ff16826001600160a01b03167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610798919081019061296f565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080d919081019061296f565b60405161081b9291906129d0565b60405180910390a35050565b6001600160a01b03821661087d5760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f206164647265737300000000006044820152606401610479565b6001600160a01b03838116600090815260056020526040902054166108dc5760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610479565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038416906379cc679090604401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050604080518481526001600160a01b038681166020830152339450871692507f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505050565b6039546001600160a01b031633146109b25760405162461bcd60e51b8152600401610479906129fe565b6109bc6000611578565b565b6001600160a01b038216610a145760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742069732061207a65726f206164647265737300000000006044820152606401610479565b6001600160a01b0383811660009081526002602052604090205416610a735760405162461bcd60e51b8152602060048201526015602482015274189c9a5919d948191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610479565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190612826565b9050610b046001600160a01b0385163330856115ca565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015610b4657600080fd5b505afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e9190612826565b90506000610b8c828461163b565b604080518281526001600160a01b03888116602083015292935033928916917f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd69910160405180910390a3505050505050565b6000610bea6001611650565b90508015610c06576006805460ff60a81b1916600160a81b1790555b610c0e6116ed565b8015610c56576006805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6039546001600160a01b03163314610c835760405162461bcd60e51b8152600401610479906129fe565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600081815481106105fd57600080fd5b6039546001600160a01b03163314610cdf5760405162461bcd60e51b8152600401610479906129fe565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b03163314610d2b5760405162461bcd60e51b8152600401610479906129fe565b6001600160a01b038116610d905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610479565b610c5681611578565b60606000610dd6610dd18460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61171e565b9050610de58460006001611834565b9350600080606080610e0a604051806040016040528060008152602001600081525090565b8551610e59577f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218a14610e3c57600080fd5b5050604080516000815260208101909152945061120b9350505050565b60005b865181101561120357610e87878281518110610e7a57610e7a612a33565b6020026020010151611a2f565b935080158015610e9d5750835160208501208b14155b15610ea757600080fd5b8015801590610ebe5750610eba84611aaf565b8514155b15610ec857600080fd5b610eea878281518110610edd57610edd612a33565b602002602001015161171e565b925082516002141561109b5760006060610f25610f2086600081518110610f1357610f13612a33565b6020026020010151611b12565b611bb8565b90925090506000610f37898e84611c66565b9050610f43818a612a5f565b98508151811015610fa75760018a51610f5c9190612a77565b841015610f6857600080fd5b60005b6040519080825280601f01601f191660200182016040528015610f95576020820181803683370190505b509a505050505050505050505061120b565b821561100e5760018a51610fbb9190612a77565b841015610fc757600080fd5b8c51891015610fd7576000610f6b565b85600181518110610fea57610fea612a33565b60200260200101519450610ffd85611b12565b9a505050505050505050505061120b565b60018a5161101c9190612a77565b84141561102857600080fd5b61104b8660018151811061103e5761103e612a33565b6020026020010151611cf9565b6110735761106586600181518110610f1357610f13612a33565b805190602001209750611093565b61108986600181518110610e7a57610e7a612a33565b8051906020012097505b5050506111f1565b8251601114156111f157895186146111b45760008a87815181106110c1576110c1612a33565b016020015160f81c90506110d6600188612a5f565b965060108160ff16106110e857600080fd5b61110d848260ff168151811061110057611100612a33565b6020026020010151611d32565b1561114a57600188516111209190612a77565b821461112b57600080fd5b5050604080516000815260208101909152965061120b95505050505050565b611162848260ff168151811061103e5761103e612a33565b61118c5761117e848260ff1681518110610f1357610f13612a33565b8051906020012095506111ae565b6111a4848260ff1681518110610e7a57610e7a612a33565b8051906020012095505b506111f1565b600187516111c29190612a77565b81146111cd57600080fd5b6111e383601081518110610f1357610f13612a33565b97505050505050505061120b565b806111fb81612a8e565b915050610e5c565b505050505050505b9392505050565b6000806112468360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006112538261171e565b9050600061127a8260008151811061126d5761126d612a33565b6020026020010151611d55565b9050806001146112bd5760405162461bcd60e51b815260206004820152600e60248201526d1c995d995c9d081c9958d95a5c1d60921b6044820152606401610479565b60006112d583600381518110610edd57610edd612a33565b905060005b815181101561156e5760006112fa838381518110610edd57610edd612a33565b905060006113218260008151811061131457611314612a33565b6020026020010151611dce565b6006549091506001600160a01b0380831691161461134057505061155c565b600061135883600181518110610edd57610edd612a33565b90506000815167ffffffffffffffff811115611376576113766128a5565b60405190808252806020026020018201604052801561139f578160200160208202803683370190505b50905060005b82518110156113f5576113c383828151811061126d5761126d612a33565b60001b8282815181106113d8576113d8612a33565b6020908102919091010152806113ed81612a8e565b9150506113a5565b50600061140e85600281518110610f1357610f13612a33565b90507f4c6ab40ee4cfa212a441d32ee2897945b4a52461284f9369e23fdf8faa6cdd698260008151811061144457611444612a33565b602002602001015114156114735761145c8282611de8565b8a61146681612a8e565b9b5050505050505061155c565b7f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373826000815181106114a7576114a7612a33565b602002602001015114156114bf5761145c8282611eaa565b7fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42826000815181106114f3576114f3612a33565b6020026020010151141561150b5761145c8282611f17565b7f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d38260008151811061153f5761153f612a33565b602002602001015114156115565761145c82612129565b50505050505b8061156681612a8e565b9150506112da565b5050505050919050565b603980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526116359085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612257565b50505050565b60006116478284612a77565b90505b92915050565b600654600090600160a81b900460ff161561169b578160ff1660011480156116775750303b155b6116935760405162461bcd60e51b815260040161047990612aa9565b506000919050565b60065460ff808416600160a01b90920416106116c95760405162461bcd60e51b815260040161047990612aa9565b506006805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b600654600160a81b900460ff166117165760405162461bcd60e51b815260040161047990612af7565b6109bc61232e565b606061172982611cf9565b61173257600080fd5b600061173d83612360565b905060008167ffffffffffffffff81111561175a5761175a6128a5565b60405190808252806020026020018201604052801561179f57816020015b60408051808201909152600080825260208201528152602001906001900390816117785790505b50905060006117b185602001516123e3565b85602001516117c09190612a5f565b90506000805b84811015611829576117d78361245e565b915060405180604001604052808381526020018481525084828151811061180057611800612a33565b60209081029190910101526118158284612a5f565b92508061182181612a8e565b9150506117c6565b509195945050505050565b6060600084511161184457600080fd5b6000845160026118549190612b42565b90508084111561186357600080fd5b61186d8482612a77565b90506118798382612a5f565b67ffffffffffffffff811115611891576118916128a5565b6040519080825280601f01601f1916602001820160405280156118bb576020820181803683370190505b509150826001141561190357601060f81b82600184516118db9190612a77565b815181106118eb576118eb612a33565b60200101906001600160f81b031916908160001a9053505b6000845b6119118387612a5f565b811015611a0c57611923600282612b77565b61198c57600487611935600284612b8b565b8151811061194557611945612a33565b602001015160f81c60f81b60f81c60ff16901c600f1660f81b84838151811061197057611970612a33565b60200101906001600160f81b031916908160001a9053506119ed565b60008761199a600284612b8b565b815181106119aa576119aa612a33565b602001015160f81c60f81b60f81c60ff16901c600f1660f81b8483815181106119d5576119d5612a33565b60200101906001600160f81b031916908160001a9053505b6119f8600183612a5f565b9150611a05600182612a5f565b9050611907565b508251611a198583612a5f565b14611a2657611a26612b9f565b50509392505050565b60606000826000015167ffffffffffffffff811115611a5057611a506128a5565b6040519080825280601f01601f191660200182016040528015611a7a576020820181803683370190505b509050805160001415611a8d5792915050565b6000816020019050611aa88460200151828660000151612502565b5092915050565b6000602082511015611ac75750805160209091012090565b81604051602001611ad89190612bb5565b60408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050919050565b8051606090611b2057600080fd5b6000611b2f83602001516123e3565b90506000818460000151611b439190612a77565b905060008167ffffffffffffffff811115611b6057611b606128a5565b6040519080825280601f01601f191660200182016040528015611b8a576020820181803683370190505b5090506000816020019050611baf848760200151611ba89190612a5f565b8285612502565b50949350505050565b600060606000835111611bca57600080fd5b6000600484600081518110611be157611be1612a33565b60209101015160f81c901c600f169050600081611c045750600092506002611c3e565b8160011415611c195750600092506001611c3e565b8160021415611c2e5750600192506002611c3e565b816003141561012c575060019250825b83611c5b868387611c50576000611c53565b60015b60ff16611834565b935093505050915091565b6000805b8351611c768683612a5f565b108015611c835750825181105b15611cf157828181518110611c9a57611c9a612a33565b01602001516001600160f81b03191684611cb48784612a5f565b81518110611cc457611cc4612a33565b01602001516001600160f81b03191614611cdf57905061120b565b80611ce981612a8e565b915050611c6a565b949350505050565b8051600090611d0a57506000919050565b6020820151805160001a9060c0821015611d28575060009392505050565b5060019392505050565b8051600090600114611d4657506000919050565b50602001515160001a60801490565b805160009015801590611d6a57508151602110155b611d7357600080fd5b6000611d8283602001516123e3565b90506000818460000151611d969190612a77565b9050600080838660200151611dab9190612a5f565b9050805191506020831015611baf57506020919091036101000a90049392505050565b8051600090601514611ddf57600080fd5b61164a82611d55565b600082600181518110611dfd57611dfd612a33565b602002602001015160001c905060008083806020019051810190611e219190612bd1565b6001600160a01b038086166000908152600460205260409020549294509092501680611e4c57600080fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018590528216906340c10f1990604401600060405180830381600087803b158015611e9657600080fd5b505af11580156105e1573d6000803e3d6000fd5b600082600181518110611ebf57611ebf612a33565b602002602001015160001c905060008083806020019051810190611ee39190612bd1565b6001600160a01b0380861660009081526003602052604090205492945090925016611f0f81838561257d565b505050505050565b600082600181518110611f2c57611f2c612a33565b6020908102919091018101516001600160a01b03808216600090815260049093526040909220549092501615611f9b5760405162461bcd60e51b8152602060048201526014602482015273189c9a5919d948185b1c9958591e48195e1a5cdd60621b6044820152606401610479565b600083600281518110611fb057611fb0612a33565b602002602001015160001c905060008084806020019051810190611fd49190612c01565b60405191935091506001600160a01b038516906000908290611ff5906126c1565b8190604051809103906000f5905080158015612015573d6000803e3d6000fd5b50604051630b127b6360e11b81529091506001600160a01b03821690631624f6c69061204990879087908a90600401612c65565b600060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b5050506001600160a01b0380831660008181526005602090815260408083208054958d166001600160a01b03199687168117909155808452600490925280832080548616851790556001805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909516841790945592519193507f78591f651c27eef63481b7fd779e44c2426cbe82c7050fe9bc90b6707efbc3d391a35050505050505050565b60008160018151811061213e5761213e612a33565b602002602001015160001c905060008260028151811061216057612160612a33565b6020908102919091018101516001600160a01b038481166000908152600290935260409092205490925016156121d85760405162461bcd60e51b815260206004820152601e60248201527f6d697373696e67206d617070696e6720746f2061636b6e6f776c6564676500006044820152606401610479565b6001600160a01b0391821660008181526002602090815260408083208054969095166001600160a01b0319968716811790955593825260039052918220805484168217905581546001810183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101805490921617905550565b60006122ac826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125ad9092919063ffffffff16565b80519091501561232957808060200190518101906122ca919061283f565b6123295760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610479565b505050565b600654600160a81b900460ff166123575760405162461bcd60e51b815260040161047990612af7565b6109bc33611578565b805160009061237157506000919050565b60008061238184602001516123e3565b84602001516123909190612a5f565b90506000846000015185602001516123a89190612a5f565b90505b808210156123da576123bc8261245e565b6123c69083612a5f565b9150826123d281612a8e565b9350506123ab565b50909392505050565b8051600090811a60808110156123fc5750600092915050565b60b8811080612417575060c08110801590612417575060f881105b156124255750600192915050565b60c08110156124525761243a600160b8612c9e565b6124479060ff1682612a77565b61120b906001612a5f565b61243a600160f8612c9e565b80516000908190811a60808110156124795760019150611aa8565b60b881101561249f5761248d608082612a77565b612498906001612a5f565b9150611aa8565b60c08110156124cc5760b78103600185019450806020036101000a85510460018201810193505050611aa8565b60f88110156124e05761248d60c082612a77565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8061250c57505050565b602081106125445782518252612523602084612a5f565b9250612530602083612a5f565b915061253d602082612a77565b905061250c565b60006001612553836020612a77565b61255f90610100612da5565b6125699190612a77565b935183518516941916939093179091525050565b6040516001600160a01b03831660248201526044810182905261232990849063a9059cbb60e01b906064016115fe565b6060611cf18484600085856001600160a01b0385163b61260f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610479565b600080866001600160a01b0316858760405161262b9190612bb5565b60006040518083038185875af1925050503d8060008114612668576040519150601f19603f3d011682016040523d82523d6000602084013e61266d565b606091505b509150915061267d828286612688565b979650505050505050565b6060831561269757508161120b565b8251156126a75782518084602001fd5b8160405162461bcd60e51b81526004016104799190612db1565b6111a780612dc583390190565b60008083601f8401126126e057600080fd5b50813567ffffffffffffffff8111156126f857600080fd5b60208301915083602082850101111561271057600080fd5b9250929050565b6000806000806000806080878903121561273057600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561275657600080fd5b6127628a838b016126ce565b9096509450606089013591508082111561277b57600080fd5b5061278889828a016126ce565b979a9699509497509295939492505050565b6000602082840312156127ac57600080fd5b5035919050565b6001600160a01b0381168114610c5657600080fd5b6000602082840312156127da57600080fd5b813561120b816127b3565b6000806000606084860312156127fa57600080fd5b8335612805816127b3565b92506020840135612815816127b3565b929592945050506040919091013590565b60006020828403121561283857600080fd5b5051919050565b60006020828403121561285157600080fd5b8151801515811461120b57600080fd5b84815283602082015281836040830137600091016040019081529392505050565b60006020828403121561289457600080fd5b815160ff8116811461120b57600080fd5b634e487b7160e01b600052604160045260246000fd5b60005b838110156128d65781810151838201526020016128be565b838111156116355750506000910152565b600082601f8301126128f857600080fd5b815167ffffffffffffffff80821115612913576129136128a5565b604051601f8301601f19908116603f0116810190828211818310171561293b5761293b6128a5565b8160405283815286602085880101111561295457600080fd5b6129658460208301602089016128bb565b9695505050505050565b60006020828403121561298157600080fd5b815167ffffffffffffffff81111561299857600080fd5b611cf1848285016128e7565b600081518084526129bc8160208601602086016128bb565b601f01601f19169290920160200192915050565b6040815260006129e360408301856129a4565b82810360208401526129f581856129a4565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612a7257612a72612a49565b500190565b600082821015612a8957612a89612a49565b500390565b6000600019821415612aa257612aa2612a49565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615612b5c57612b5c612a49565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612b8657612b86612b61565b500690565b600082612b9a57612b9a612b61565b500490565b634e487b7160e01b600052600160045260246000fd5b60008251612bc78184602087016128bb565b9190910192915050565b60008060408385031215612be457600080fd5b825191506020830151612bf6816127b3565b809150509250929050565b60008060408385031215612c1457600080fd5b825167ffffffffffffffff80821115612c2c57600080fd5b612c38868387016128e7565b93506020850151915080821115612c4e57600080fd5b50612c5b858286016128e7565b9150509250929050565b606081526000612c7860608301866129a4565b8281036020840152612c8a81866129a4565b91505060ff83166040830152949350505050565b600060ff821660ff841680821015612cb857612cb8612a49565b90039392505050565b600181815b80851115612cfc578160001904821115612ce257612ce2612a49565b80851615612cef57918102915b93841c9390800290612cc6565b509250929050565b600082612d135750600161164a565b81612d205750600061164a565b8160018114612d365760028114612d4057612d5c565b600191505061164a565b60ff841115612d5157612d51612a49565b50506001821b61164a565b5060208310610133831016604e8410600b8410161715612d7f575081810a61164a565b612d898383612cc1565b8060001904821115612d9d57612d9d612a49565b029392505050565b60006116478383612d04565b60208152600061164760208301846129a456fe608060405234801561001057600080fd5b50611187806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461023d578063a457c2d714610245578063a9059cbb14610258578063dd62ed3e1461026b578063f2fde38b1461027e57600080fd5b806370a08231146101de578063715018a61461020757806379cc67901461020f5780638da5cb5b1461022257600080fd5b806323b872dd116100e957806323b872dd14610183578063313ce5671461019657806339509351146101a557806340c10f19146101b857806342966c68146101cb57600080fd5b806306fdde031461011b578063095ea7b3146101395780631624f6c61461015c57806318160ddd14610171575b600080fd5b610123610291565b6040516101309190610da2565b60405180910390f35b61014c610147366004610e0e565b610323565b6040519015158152602001610130565b61016f61016a366004610edb565b61033b565b005b6035545b604051908152602001610130565b61014c610191366004610f59565b6103bd565b60405160128152602001610130565b61014c6101b3366004610e0e565b6103e1565b61016f6101c6366004610e0e565b610403565b61016f6101d9366004610f95565b610444565b6101756101ec366004610fae565b6001600160a01b031660009081526033602052604090205490565b61016f610451565b61016f61021d366004610e0e565b610487565b6097546040516001600160a01b039091168152602001610130565b61012361049c565b61014c610253366004610e0e565b6104ab565b61014c610266366004610e0e565b610526565b610175610279366004610fd0565b610534565b61016f61028c366004610fae565b61055f565b6060603680546102a090611003565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90611003565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050905090565b6000336103318185856105f7565b5060019392505050565b6000610347600161071c565b9050801561035f576000805461ff0019166101001790555b61036984846107a9565b6103716107da565b80156103b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000336103cb858285610801565b6103d6858585610875565b506001949350505050565b6000336103318185856103f48383610534565b6103fe9190611054565b6105f7565b6097546001600160a01b031633146104365760405162461bcd60e51b815260040161042d9061106c565b60405180910390fd5b6104408282610a43565b5050565b61044e3382610b22565b50565b6097546001600160a01b0316331461047b5760405162461bcd60e51b815260040161042d9061106c565b6104856000610c6d565b565b610492823383610801565b6104408282610b22565b6060603780546102a090611003565b600033816104b98286610534565b9050838110156105195760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161042d565b6103d682868684036105f7565b600033610331818585610875565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b031633146105895760405162461bcd60e51b815260040161042d9061106c565b6001600160a01b0381166105ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161042d565b61044e81610c6d565b6001600160a01b0383166106595760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161042d565b6001600160a01b0382166106ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161042d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008054610100900460ff1615610763578160ff16600114801561073f5750303b155b61075b5760405162461bcd60e51b815260040161042d906110a1565b506000919050565b60005460ff80841691161061078a5760405162461bcd60e51b815260040161042d906110a1565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166107d05760405162461bcd60e51b815260040161042d906110ef565b6104408282610cbf565b600054610100900460ff166104855760405162461bcd60e51b815260040161042d906110ef565b600061080d8484610534565b905060001981146103b757818110156108685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042d565b6103b784848484036105f7565b6001600160a01b0383166108d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161042d565b6001600160a01b03821661093b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161042d565b6001600160a01b038316600090815260336020526040902054818110156109b35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161042d565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906109ea908490611054565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a3691815260200190565b60405180910390a36103b7565b6001600160a01b038216610a995760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042d565b8060356000828254610aab9190611054565b90915550506001600160a01b03821660009081526033602052604081208054839290610ad8908490611054565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b825760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161042d565b6001600160a01b03821660009081526033602052604090205481811015610bf65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161042d565b6001600160a01b0383166000908152603360205260408120838303905560358054849290610c2590849061113a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161070f565b505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610ce65760405162461bcd60e51b815260040161042d906110ef565b8151610cf9906036906020850190610d09565b508051610c689060379060208401905b828054610d1590611003565b90600052602060002090601f016020900481019282610d375760008555610d7d565b82601f10610d5057805160ff1916838001178555610d7d565b82800160010185558215610d7d579182015b82811115610d7d578251825591602001919060010190610d62565b50610d89929150610d8d565b5090565b5b80821115610d895760008155600101610d8e565b600060208083528351808285015260005b81811015610dcf57858101830151858201604001528201610db3565b81811115610de1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107a457600080fd5b60008060408385031215610e2157600080fd5b610e2a83610df7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e5f57600080fd5b813567ffffffffffffffff80821115610e7a57610e7a610e38565b604051601f8301601f19908116603f01168101908282118183101715610ea257610ea2610e38565b81604052838152866020858801011115610ebb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610ef057600080fd5b833567ffffffffffffffff80821115610f0857600080fd5b610f1487838801610e4e565b94506020860135915080821115610f2a57600080fd5b50610f3786828701610e4e565b925050604084013560ff81168114610f4e57600080fd5b809150509250925092565b600080600060608486031215610f6e57600080fd5b610f7784610df7565b9250610f8560208501610df7565b9150604084013590509250925092565b600060208284031215610fa757600080fd5b5035919050565b600060208284031215610fc057600080fd5b610fc982610df7565b9392505050565b60008060408385031215610fe357600080fd5b610fec83610df7565b9150610ffa60208401610df7565b90509250929050565b600181811c9082168061101757607f821691505b6020821081141561103857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156110675761106761103e565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561114c5761114c61103e565b50039056fea26469706673582212204876c178a59847c0a2f91832539f910445d9b100e131bcff8637efd66032644964736f6c63430008090033a2646970667358221220f246d1f615d4c0a6c73616db0092b0d0dbf46c0555af139bf8d41b10d0aa5f6c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8759,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "TxTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage"
      },
      {
        "astId": 8763,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "RxTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(BridgedToken)2788)dyn_storage"
      },
      {
        "astId": 8767,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "TxMapped",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8772,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "TxMappedInv",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)"
      },
      {
        "astId": 8777,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "RxMapped",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_contract(BridgedToken)2788)"
      },
      {
        "astId": 8781,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "RxMappedInv",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7931,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "otherSideBridge",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 543,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "_initialized",
        "offset": 20,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 546,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "_initializing",
        "offset": 21,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2075,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "_owner",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 535,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8591,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "lightclient",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(EthereumLightClient)3296"
      },
      {
        "astId": 8595,
        "contract": "contracts/TokenLockerOnHarmony.sol:TokenLockerOnHarmony",
        "label": "spentReceipt",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(BridgedToken)2788)dyn_storage": {
        "base": "t_contract(BridgedToken)2788",
        "encoding": "dynamic_array",
        "label": "contract BridgedToken[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20Upgradeable)1478)dyn_storage": {
        "base": "t_contract(IERC20Upgradeable)1478",
        "encoding": "dynamic_array",
        "label": "contract IERC20Upgradeable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BridgedToken)2788": {
        "encoding": "inplace",
        "label": "contract BridgedToken",
        "numberOfBytes": "20"
      },
      "t_contract(EthereumLightClient)3296": {
        "encoding": "inplace",
        "label": "contract EthereumLightClient",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1478": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(BridgedToken)2788)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BridgedToken)",
        "numberOfBytes": "32",
        "value": "t_contract(BridgedToken)2788"
      },
      "t_mapping(t_address,t_contract(IERC20Upgradeable)1478)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IERC20Upgradeable)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20Upgradeable)1478"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}