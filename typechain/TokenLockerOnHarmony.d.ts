/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenLockerOnHarmonyInterface extends ethers.utils.Interface {
  functions: {
    "RxMapped(address)": FunctionFragment;
    "RxMappedInv(address)": FunctionFragment;
    "RxTokens(uint256)": FunctionFragment;
    "TxMapped(address)": FunctionFragment;
    "TxMappedInv(address)": FunctionFragment;
    "TxTokens(uint256)": FunctionFragment;
    "bind(address)": FunctionFragment;
    "changeLightClient(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "issueTokenMapReq(address)": FunctionFragment;
    "lightclient()": FunctionFragment;
    "lock(address,address,uint256)": FunctionFragment;
    "otherSideBridge()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "spentReceipt(bytes32)": FunctionFragment;
    "totalBridgedTokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(address,address,uint256)": FunctionFragment;
    "validateAndExecuteProof(uint256,bytes32,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RxMapped", values: [string]): string;
  encodeFunctionData(functionFragment: "RxMappedInv", values: [string]): string;
  encodeFunctionData(
    functionFragment: "RxTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "TxMapped", values: [string]): string;
  encodeFunctionData(functionFragment: "TxMappedInv", values: [string]): string;
  encodeFunctionData(
    functionFragment: "TxTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bind", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeLightClient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokenMapReq",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lightclient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "otherSideBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spentReceipt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBridgedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAndExecuteProof",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "RxMapped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RxMappedInv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RxTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TxMapped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TxMappedInv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TxTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeLightClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueTokenMapReq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lightclient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otherSideBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spentReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBridgedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateAndExecuteProof",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,address,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Locked(address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenMapAck(address,address)": EventFragment;
    "TokenMapReq(address,uint8,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapAck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapReq"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    token: string;
    sender: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type LockedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    token: string;
    sender: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TokenMapAckEvent = TypedEvent<
  [string, string] & { tokenReq: string; tokenAck: string }
>;

export type TokenMapReqEvent = TypedEvent<
  [string, number, string, string] & {
    tokenReq: string;
    decimals: number;
    name: string;
    symbol: string;
  }
>;

export class TokenLockerOnHarmony extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenLockerOnHarmonyInterface;

  functions: {
    RxMapped(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    TxMapped(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    bind(
      otherSide: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLightClient(
      newClient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lightclient(overrides?: CallOverrides): Promise<[string]>;

    lock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    otherSideBridge(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spentReceipt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalBridgedTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateAndExecuteProof(
      blockNo: BigNumberish,
      rootHash: BytesLike,
      proofPath: BigNumberish,
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

  RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

  RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  TxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

  TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

  TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  bind(
    otherSide: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLightClient(
    newClient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueTokenMapReq(
    thisSideToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lightclient(overrides?: CallOverrides): Promise<string>;

  lock(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  otherSideBridge(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spentReceipt(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  totalBridgedTokens(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateAndExecuteProof(
    blockNo: BigNumberish,
    rootHash: BytesLike,
    proofPath: BigNumberish,
    proof: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

    RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

    RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    TxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

    TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

    TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    bind(otherSide: string, overrides?: CallOverrides): Promise<void>;

    changeLightClient(
      newClient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lightclient(overrides?: CallOverrides): Promise<string>;

    lock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    otherSideBridge(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    spentReceipt(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    totalBridgedTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateAndExecuteProof(
      blockNo: BigNumberish,
      rootHash: BytesLike,
      proofPath: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Burn(address,address,uint256,address)"(
      token?: string | null,
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; sender: string; amount: BigNumber; recipient: string }
    >;

    Burn(
      token?: string | null,
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; sender: string; amount: BigNumber; recipient: string }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Locked(address,address,uint256,address)"(
      token?: string | null,
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; sender: string; amount: BigNumber; recipient: string }
    >;

    Locked(
      token?: string | null,
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; sender: string; amount: BigNumber; recipient: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TokenMapAck(address,address)"(
      tokenReq?: string | null,
      tokenAck?: string | null
    ): TypedEventFilter<
      [string, string],
      { tokenReq: string; tokenAck: string }
    >;

    TokenMapAck(
      tokenReq?: string | null,
      tokenAck?: string | null
    ): TypedEventFilter<
      [string, string],
      { tokenReq: string; tokenAck: string }
    >;

    "TokenMapReq(address,uint8,string,string)"(
      tokenReq?: string | null,
      decimals?: BigNumberish | null,
      name?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, number, string, string],
      { tokenReq: string; decimals: number; name: string; symbol: string }
    >;

    TokenMapReq(
      tokenReq?: string | null,
      decimals?: BigNumberish | null,
      name?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, number, string, string],
      { tokenReq: string; decimals: number; name: string; symbol: string }
    >;
  };

  estimateGas: {
    RxMapped(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    TxMapped(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bind(
      otherSide: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLightClient(
      newClient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lightclient(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    otherSideBridge(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spentReceipt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBridgedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateAndExecuteProof(
      blockNo: BigNumberish,
      rootHash: BytesLike,
      proofPath: BigNumberish,
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RxMapped(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RxMappedInv(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RxTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TxMapped(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TxMappedInv(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TxTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bind(
      otherSide: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLightClient(
      newClient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lightclient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    otherSideBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spentReceipt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBridgedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateAndExecuteProof(
      blockNo: BigNumberish,
      rootHash: BytesLike,
      proofPath: BigNumberish,
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
