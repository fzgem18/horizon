/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MPTTest, MPTTestInterface } from "../MPTTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hashRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "paths",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "proofs",
        type: "bytes",
      },
    ],
    name: "validateProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a6e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806353c0d7d014610030575b600080fd5b61004361003e3660046107da565b610059565b604051610050919061085a565b60405180910390f35b606061009c858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100a592505050565b95945050505050565b606060006100da8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006100e782610201565b905060006100f48361026d565b905060005b818110156101af5761010a836102f0565b600888901c9790945060ff1661011f8561034d565b89146101725760405162461bcd60e51b815260206004820152601a60248201527f50726f6f664c69623a20696e76616c696420686173686c696e6b00000000000060448201526064015b60405180910390fd5b61017c8582610368565b94506101896001846108c5565b82101561019c57610199856104bf565b98505b50806101a7816108dc565b9150506100f9565b5085156101ed5760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840e0c2e8d60a31b6044820152606401610169565b6101f68361053a565b979650505050505050565b604080516080810182526000918101828152606082018390528152602081019190915261022d826105d7565b61023657600080fd5b60006102458360200151610610565b836020015161025491906108f7565b6040805180820190915293845260208401525090919050565b805160009061027e57506000919050565b60008061028e8460200151610610565b846020015161029d91906108f7565b90506000846000015185602001516102b591906108f7565b90505b808210156102e7576102c982610692565b6102d390836108f7565b9150826102df816108dc565b9350506102b8565b50909392505050565b604080518082019091526000808252602082015261030d8261073b565b61031657600080fd5b6020820151600061032682610692565b905061033281836108f7565b60209485015260408051808201909152908152928301525090565b805160009061035b57600080fd5b5080516020909101512090565b6040805180820190915260008082526020820152610385836105d7565b6103db5760405162461bcd60e51b815260206004820152602160248201527f524c504465636f646572206974657261746f72206973206e6f742061206c69736044820152601d60fa1b6064820152608401610169565b825160208401516000916103ee916108f7565b905060006103ff8560200151610610565b856020015161040e91906108f7565b90506000805b858110156104455761042583610692565b915061043182846108f7565b92508061043d816108dc565b915050610414565b5061044f82610692565b90508261045c82846108f7565b111561049e5760405162461bcd60e51b8152602060048201526011602482015270524c50206974656d206f766572666c6f7760781b6044820152606401610169565b60405180604001604052808281526020018381525093505050505b92915050565b8051600090158015906104d457508151602110155b6104dd57600080fd5b60006104ec8360200151610610565b9050600081846000015161050091906108c5565b905060008083866020015161051591906108f7565b905080519150602083101561053157826020036101000a820491505b50949350505050565b805160609061054857600080fd5b60006105578360200151610610565b9050600081846000015161056b91906108c5565b905060008167ffffffffffffffff8111156105885761058861090f565b6040519080825280601f01601f1916602001820160405280156105b2576020820181803683370190505b50905060008160200190506105318487602001516105d091906108f7565b828561075f565b80516000906105e857506000919050565b6020820151805160001a9060c0821015610606575060009392505050565b5060019392505050565b8051600090811a60808110156106295750600092915050565b60b8811080610644575060c08110801590610644575060f881105b156106525750600192915050565b60c081101561068657610667600160b8610925565b6106749060ff16826108c5565b61067f9060016108f7565b9392505050565b610667600160f8610925565b80516000908190811a60808110156106ad5760019150610734565b60b88110156106d3576106c16080826108c5565b6106cc9060016108f7565b9150610734565b60c08110156107005760b78103600185019450806020036101000a85510460018201810193505050610734565b60f8811015610714576106c160c0826108c5565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80518051602082015160009291610751916108f7565b836020015110915050919050565b8061076957505050565b602081106107a157825182526107806020846108f7565b925061078d6020836108f7565b915061079a6020826108c5565b9050610769565b600060016107b08360206108c5565b6107bc90610100610a2c565b6107c691906108c5565b935183518516941916939093179091525050565b600080600080606085870312156107f057600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561081657600080fd5b818701915087601f83011261082a57600080fd5b81358181111561083957600080fd5b88602082850101111561084b57600080fd5b95989497505060200194505050565b600060208083528351808285015260005b818110156108875785810183015185820160400152820161086b565b81811115610899576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156108d7576108d76108af565b500390565b60006000198214156108f0576108f06108af565b5060010190565b6000821982111561090a5761090a6108af565b500190565b634e487b7160e01b600052604160045260246000fd5b600060ff821660ff84168082101561093f5761093f6108af565b90039392505050565b600181815b80851115610983578160001904821115610969576109696108af565b8085161561097657918102915b93841c939080029061094d565b509250929050565b60008261099a575060016104b9565b816109a7575060006104b9565b81600181146109bd57600281146109c7576109e3565b60019150506104b9565b60ff8411156109d8576109d86108af565b50506001821b6104b9565b5060208310610133831016604e8410600b8410161715610a06575081810a6104b9565b610a108383610948565b8060001904821115610a2457610a246108af565b029392505050565b600061067f838361098b56fea2646970667358221220eda5ed48112dc05eb0071c9ce22baa5edd42fad484c39581d10cf74c600814d264736f6c63430008090033";

export class MPTTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MPTTest> {
    return super.deploy(overrides || {}) as Promise<MPTTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MPTTest {
    return super.attach(address) as MPTTest;
  }
  connect(signer: Signer): MPTTest__factory {
    return super.connect(signer) as MPTTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MPTTestInterface {
    return new utils.Interface(_abi) as MPTTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MPTTest {
    return new Contract(address, _abi, signerOrProvider) as MPTTest;
  }
}
