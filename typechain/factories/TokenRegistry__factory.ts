/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenRegistry, TokenRegistryInterface } from "../TokenRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenAck",
        type: "address",
      },
    ],
    name: "TokenMapAck",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "TokenMapReq",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMapped",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMappedInv",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "RxTokens",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMapped",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMappedInv",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TxTokens",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20Upgradeable",
        name: "thisSideToken",
        type: "address",
      },
    ],
    name: "issueTokenMapReq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBridgedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063cd06c3a11161005b578063cd06c3a11461010e578063d650d3f714610129578063e05bdaf714610152578063e71575e81461017b57600080fd5b806335c6814d1461008d5780634ae83c8e146100bd5780638487b9cf146100d2578063ae24fbb4146100fb575b600080fd5b6100a061009b3660046103f2565b6101a4565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004610423565b6101ce565b005b6100a06100e0366004610423565b6005602052600090815260409020546001600160a01b031681565b6100a06101093660046103f2565b6103e2565b600054600154604080519283526020830191909152016100b4565b6100a0610137366004610423565b6003602052600090815260409020546001600160a01b031681565b6100a0610160366004610423565b6004602052600090815260409020546001600160a01b031681565b6100a0610189366004610423565b6002602052600090815260409020546001600160a01b031681565b600181815481106101b457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03818116600090815260026020526040902054161561023a5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20697320616c7265616479206d6170706564000000000000000000604482015260640160405180910390fd5b6000819050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561027857600080fd5b505afa15801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b09190610447565b60ff16826001600160a01b03167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a42836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561031757600080fd5b505afa15801561032b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035391908101906104b0565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103c891908101906104b0565b6040516103d6929190610589565b60405180910390a35050565b600081815481106101b457600080fd5b60006020828403121561040457600080fd5b5035919050565b6001600160a01b038116811461042057600080fd5b50565b60006020828403121561043557600080fd5b81356104408161040b565b9392505050565b60006020828403121561045957600080fd5b815160ff8116811461044057600080fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561049b578181015183820152602001610483565b838111156104aa576000848401525b50505050565b6000602082840312156104c257600080fd5b815167ffffffffffffffff808211156104da57600080fd5b818401915084601f8301126104ee57600080fd5b8151818111156105005761050061046a565b604051601f8201601f19908116603f011681019083821181831017156105285761052861046a565b8160405282815287602084870101111561054157600080fd5b610552836020830160208801610480565b979650505050505050565b60008151808452610575816020860160208601610480565b601f01601f19169290920160200192915050565b60408152600061059c604083018561055d565b82810360208401526105ae818561055d565b9594505050505056fea264697066735822122067af54a0710c1d96af473fa83bd372215016123edf77b3599545ea542ab806f564736f6c63430008090033";

export class TokenRegistry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenRegistry> {
    return super.deploy(overrides || {}) as Promise<TokenRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenRegistry {
    return super.attach(address) as TokenRegistry;
  }
  connect(signer: Signer): TokenRegistry__factory {
    return super.connect(signer) as TokenRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenRegistryInterface {
    return new utils.Interface(_abi) as TokenRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenRegistry {
    return new Contract(address, _abi, signerOrProvider) as TokenRegistry;
  }
}
