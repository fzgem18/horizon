/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenRegistry, TokenRegistryInterface } from "../TokenRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenAck",
        type: "address",
      },
    ],
    name: "TokenMapAck",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "TokenMapReq",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMapped",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMappedInv",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "RxTokens",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMapped",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMappedInv",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TxTokens",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20Upgradeable",
        name: "thisSideToken",
        type: "address",
      },
    ],
    name: "issueTokenMapReq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBridgedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610dd4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063cd06c3a11161005b578063cd06c3a114610139578063d650d3f714610158578063e05bdaf714610188578063e71575e8146101b857610088565b806335c6814d1461008d5780634ae83c8e146100bd5780638487b9cf146100d9578063ae24fbb414610109575b600080fd5b6100a760048036038101906100a29190610852565b6101e8565b6040516100b491906108fe565b60405180910390f35b6100d760048036038101906100d29190610969565b610227565b005b6100f360048036038101906100ee91906109c2565b61065f565b60405161010091906109fe565b60405180910390f35b610123600480360381019061011e9190610852565b610692565b6040516101309190610a3a565b60405180910390f35b6101416106d1565b60405161014f929190610a64565b60405180910390f35b610172600480360381019061016d91906109c2565b61076c565b60405161017f9190610a3a565b60405180910390f35b6101a2600480360381019061019d91906109c2565b61079f565b6040516101af91906108fe565b60405180910390f35b6101d260048036038101906101cd91906109c2565b6107d2565b6040516101df91906109fe565b60405180910390f35b600181815481106101f857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102537f4d329c047558e847d83c41f7b16f931378338a11c28d24a8f888cd8a91ad1fef60001b610805565b61027f7f1520fb089c4225b793fe99b601bdb5b11fdcbf4f32836fc5246d3ce88ee5e0e560001b610805565b6102ab7fe346345b61ed97afc4dc36f6eee27fd4ed90cd603cb9b19fa4fa8d335b400ac660001b610805565b6102d77f36b63849b57e620be1f5428c13b7e17ae4b5027249de99297adc256872307fd460001b610805565b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c90610aea565b60405180910390fd5b6103d17fa1b99a76233f65fa9adcfb1b1d8ca212c6ba5b072deb46d47fc81c12ce7e7cab60001b610805565b6103fd7f51e0beeed9a15026c2f06695fed42049c07b0f525ac417caf918810ad9eb123f60001b610805565b6104297f594e046a257f5b5bde69e9f70cb8214845614a9a2cdc3153d6c8ab8082ccaf2160001b610805565b600081905061045a7f978e9d65af7d344f3f69524e7d7da4bc845314dee53b9c57ecebfe866b15b09e60001b610805565b6104867fc3063d8f91cf2fe8e4fe0d22905c93b616005e197e0821ecc18054bb5712292c60001b610805565b8073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610b43565b60ff168273ffffffffffffffffffffffffffffffffffffffff167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a428373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561058557600080fd5b505afa158015610599573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105c29190610cda565b8473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106459190610cda565b604051610653929190610d67565b60405180910390a35050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481106106a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806107007f7d4b5a1a4b575b06b944f8b44f77f6fa6cd1c90208e71195b8c18e3fd3ae18b060001b610805565b61072c7f550e13ef54ebcdff3bc59829b668580f36a89382cd26070bfd73f6e6d32d857960001b610805565b6107587f55710692bc0f43b05a6ef1e64b4a7bc3c38e4b25df78178118a2983128066c9760001b610805565b600080549050600180549050915091509091565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61082f8161081c565b811461083a57600080fd5b50565b60008135905061084c81610826565b92915050565b60006020828403121561086857610867610812565b5b60006108768482850161083d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108c46108bf6108ba8461087f565b61089f565b61087f565b9050919050565b60006108d6826108a9565b9050919050565b60006108e8826108cb565b9050919050565b6108f8816108dd565b82525050565b600060208201905061091360008301846108ef565b92915050565b60006109248261087f565b9050919050565b600061093682610919565b9050919050565b6109468161092b565b811461095157600080fd5b50565b6000813590506109638161093d565b92915050565b60006020828403121561097f5761097e610812565b5b600061098d84828501610954565b91505092915050565b61099f81610919565b81146109aa57600080fd5b50565b6000813590506109bc81610996565b92915050565b6000602082840312156109d8576109d7610812565b5b60006109e6848285016109ad565b91505092915050565b6109f881610919565b82525050565b6000602082019050610a1360008301846109ef565b92915050565b6000610a24826108cb565b9050919050565b610a3481610a19565b82525050565b6000602082019050610a4f6000830184610a2b565b92915050565b610a5e8161081c565b82525050565b6000604082019050610a796000830185610a55565b610a866020830184610a55565b9392505050565b600082825260208201905092915050565b7f746f6b656e20697320616c7265616479206d6170706564000000000000000000600082015250565b6000610ad4601783610a8d565b9150610adf82610a9e565b602082019050919050565b60006020820190508181036000830152610b0381610ac7565b9050919050565b600060ff82169050919050565b610b2081610b0a565b8114610b2b57600080fd5b50565b600081519050610b3d81610b17565b92915050565b600060208284031215610b5957610b58610812565b5b6000610b6784828501610b2e565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bc382610b7a565b810181811067ffffffffffffffff82111715610be257610be1610b8b565b5b80604052505050565b6000610bf5610808565b9050610c018282610bba565b919050565b600067ffffffffffffffff821115610c2157610c20610b8b565b5b610c2a82610b7a565b9050602081019050919050565b60005b83811015610c55578082015181840152602081019050610c3a565b83811115610c64576000848401525b50505050565b6000610c7d610c7884610c06565b610beb565b905082815260208101848484011115610c9957610c98610b75565b5b610ca4848285610c37565b509392505050565b600082601f830112610cc157610cc0610b70565b5b8151610cd1848260208601610c6a565b91505092915050565b600060208284031215610cf057610cef610812565b5b600082015167ffffffffffffffff811115610d0e57610d0d610817565b5b610d1a84828501610cac565b91505092915050565b600081519050919050565b6000610d3982610d23565b610d438185610a8d565b9350610d53818560208601610c37565b610d5c81610b7a565b840191505092915050565b60006040820190508181036000830152610d818185610d2e565b90508181036020830152610d958184610d2e565b9050939250505056fea26469706673582212203c3c25f5b8993b02482b8bcc94bec1e659e2ef1a441ab58304e3dcef71c664b064736f6c63430008090033";

export class TokenRegistry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenRegistry> {
    return super.deploy(overrides || {}) as Promise<TokenRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenRegistry {
    return super.attach(address) as TokenRegistry;
  }
  connect(signer: Signer): TokenRegistry__factory {
    return super.connect(signer) as TokenRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenRegistryInterface {
    return new utils.Interface(_abi) as TokenRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenRegistry {
    return new Contract(address, _abi, signerOrProvider) as TokenRegistry;
  }
}
