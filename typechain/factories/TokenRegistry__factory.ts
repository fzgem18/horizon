/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenRegistry, TokenRegistryInterface } from "../TokenRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenAck",
        type: "address",
      },
    ],
    name: "TokenMapAck",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "TokenMapReq",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMapped",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMappedInv",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "RxTokens",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMapped",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMappedInv",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TxTokens",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20Upgradeable",
        name: "thisSideToken",
        type: "address",
      },
    ],
    name: "issueTokenMapReq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBridgedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b73806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063cd06c3a11161005b578063cd06c3a114610139578063d650d3f714610158578063e05bdaf714610188578063e71575e8146101b857610088565b806335c6814d1461008d5780634ae83c8e146100bd5780638487b9cf146100d9578063ae24fbb414610109575b600080fd5b6100a760048036038101906100a29190610744565b6101e8565b6040516100b49190610849565b60405180910390f35b6100d760048036038101906100d291906106da565b610227565b005b6100f360048036038101906100ee91906106b1565b6104d3565b604051610100919061082e565b60405180910390f35b610123600480360381019061011e9190610744565b610506565b6040516101309190610864565b60405180910390f35b610141610545565b60405161014f9291906108d6565b60405180910390f35b610172600480360381019061016d91906106b1565b61055c565b60405161017f9190610864565b60405180910390f35b6101a2600480360381019061019d91906106b1565b61058f565b6040516101af9190610849565b60405180910390f35b6101d260048036038101906101cd91906106b1565b6105c2565b6040516101df919061082e565b60405180910390f35b600181815481106101f857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ec906108b6565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610378919061076d565b60ff168273ffffffffffffffffffffffffffffffffffffffff167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a428373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156103f957600080fd5b505afa15801561040d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104369190610703565b8473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104b99190610703565b6040516104c792919061087f565b60405180910390a35050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818154811061051657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080549050600180549050915091509091565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061060861060384610924565b6108ff565b90508281526020810184848401111561062057600080fd5b61062b848285610a14565b509392505050565b60008135905061064281610ae1565b92915050565b60008135905061065781610af8565b92915050565b600082601f83011261066e57600080fd5b815161067e8482602086016105f5565b91505092915050565b60008135905061069681610b0f565b92915050565b6000815190506106ab81610b26565b92915050565b6000602082840312156106c357600080fd5b60006106d184828501610633565b91505092915050565b6000602082840312156106ec57600080fd5b60006106fa84828501610648565b91505092915050565b60006020828403121561071557600080fd5b600082015167ffffffffffffffff81111561072f57600080fd5b61073b8482850161065d565b91505092915050565b60006020828403121561075657600080fd5b600061076484828501610687565b91505092915050565b60006020828403121561077f57600080fd5b600061078d8482850161069c565b91505092915050565b61079f81610971565b82525050565b6107ae816109cc565b82525050565b6107bd816109f0565b82525050565b60006107ce82610955565b6107d88185610960565b93506107e8818560208601610a14565b6107f181610aa7565b840191505092915050565b6000610809601783610960565b915061081482610ab8565b602082019050919050565b610828816109b5565b82525050565b60006020820190506108436000830184610796565b92915050565b600060208201905061085e60008301846107a5565b92915050565b600060208201905061087960008301846107b4565b92915050565b6000604082019050818103600083015261089981856107c3565b905081810360208301526108ad81846107c3565b90509392505050565b600060208201905081810360008301526108cf816107fc565b9050919050565b60006040820190506108eb600083018561081f565b6108f8602083018461081f565b9392505050565b600061090961091a565b90506109158282610a47565b919050565b6000604051905090565b600067ffffffffffffffff82111561093f5761093e610a78565b5b61094882610aa7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061097c82610995565b9050919050565b600061098e82610971565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006109d7826109de565b9050919050565b60006109e982610995565b9050919050565b60006109fb82610a02565b9050919050565b6000610a0d82610995565b9050919050565b60005b83811015610a32578082015181840152602081019050610a17565b83811115610a41576000848401525b50505050565b610a5082610aa7565b810181811067ffffffffffffffff82111715610a6f57610a6e610a78565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f746f6b656e20697320616c7265616479206d6170706564000000000000000000600082015250565b610aea81610971565b8114610af557600080fd5b50565b610b0181610983565b8114610b0c57600080fd5b50565b610b18816109b5565b8114610b2357600080fd5b50565b610b2f816109bf565b8114610b3a57600080fd5b5056fea26469706673582212208426c7d24976f9de5d449bbc578adfa87490885b85dca9f150a3dbad6d2095bc64736f6c63430008040033";

export class TokenRegistry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenRegistry> {
    return super.deploy(overrides || {}) as Promise<TokenRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenRegistry {
    return super.attach(address) as TokenRegistry;
  }
  connect(signer: Signer): TokenRegistry__factory {
    return super.connect(signer) as TokenRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenRegistryInterface {
    return new utils.Interface(_abi) as TokenRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenRegistry {
    return new Contract(address, _abi, signerOrProvider) as TokenRegistry;
  }
}
