/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenRegistry, TokenRegistryInterface } from "../TokenRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenAck",
        type: "address",
      },
    ],
    name: "TokenMapAck",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenReq",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "TokenMapReq",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMapped",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RxMappedInv",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "RxTokens",
    outputs: [
      {
        internalType: "contract BridgedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMapped",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TxMappedInv",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TxTokens",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20Upgradeable",
        name: "thisSideToken",
        type: "address",
      },
    ],
    name: "issueTokenMapReq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBridgedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d86806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063cd06c3a11161005b578063cd06c3a114610139578063d650d3f714610158578063e05bdaf714610188578063e71575e8146101b857610088565b806335c6814d1461008d5780634ae83c8e146100bd5780638487b9cf146100d9578063ae24fbb414610109575b600080fd5b6100a760048036038101906100a29190610957565b6101e8565b6040516100b49190610a5c565b60405180910390f35b6100d760048036038101906100d291906108ed565b610227565b005b6100f360048036038101906100ee91906108c4565b61065f565b6040516101009190610a41565b60405180910390f35b610123600480360381019061011e9190610957565b610692565b6040516101309190610a77565b60405180910390f35b6101416106d1565b60405161014f929190610ae9565b60405180910390f35b610172600480360381019061016d91906108c4565b61076c565b60405161017f9190610a77565b60405180910390f35b6101a2600480360381019061019d91906108c4565b61079f565b6040516101af9190610a5c565b60405180910390f35b6101d260048036038101906101cd91906108c4565b6107d2565b6040516101df9190610a41565b60405180910390f35b600181815481106101f857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102537f77dfd12de21ce6b9528d500f58060ca0cc0b8c879178ab8d74b4c2dfb1adf62960001b610805565b61027f7f822f9bf01ef848ea04eb068fb05c8f68dcea55c52f43d0f08869d49b82880c1060001b610805565b6102ab7f3d6f50d7702881f4e3d4ea6e5d5777378c3825234146b4a6cbc3a01c9ffde7e860001b610805565b6102d77f369ec0d3d7f1f160840a157c66925677a1a78f6f2f60de559d224bc87b5edaad60001b610805565b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c90610ac9565b60405180910390fd5b6103d17fb186ca234691f561aa595647488a220a2be9eea914d73abe2b14730fa8ac67fe60001b610805565b6103fd7f10f98314be36a2c0312716f91a6b8c2898ba0c8163d55891add82341da35c03a60001b610805565b6104297f9d0843b31408838ece9a83f00ee02b1c08f7fd26f49f57fe9445abea03fbbe6160001b610805565b600081905061045a7fbe10c4d86c42acacd0e1c99a35717e5ac475d9e4407fba42a99bd95bc6d30bb360001b610805565b6104867f12c2a4cd670292bf43f8b1f8c441eccb4054382069ec4ce6ce2ee51cbf8b829360001b610805565b8073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610980565b60ff168273ffffffffffffffffffffffffffffffffffffffff167fc13b93ab57586894396c38a46a06c88056fdbb23c7c595f8d08274f9a8593a428373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561058557600080fd5b505afa158015610599573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105c29190610916565b8473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106459190610916565b604051610653929190610a92565b60405180910390a35050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481106106a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806107007f5a71a6e0f257721d54647e8eb9af98801a937468b768f9fc04b0499fa2d7697c60001b610805565b61072c7f0ccc5813cfd4cfda512a33a2ba8869a8667fb8f08393533ddf7adfb7886c977560001b610805565b6107587f90751e42eff7c5ecae4aa1bdaa92c11ab235eecdb1c403e74e28357952a6896e60001b610805565b600080549050600180549050915091509091565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b600061081b61081684610b37565b610b12565b90508281526020810184848401111561083357600080fd5b61083e848285610c27565b509392505050565b60008135905061085581610cf4565b92915050565b60008135905061086a81610d0b565b92915050565b600082601f83011261088157600080fd5b8151610891848260208601610808565b91505092915050565b6000813590506108a981610d22565b92915050565b6000815190506108be81610d39565b92915050565b6000602082840312156108d657600080fd5b60006108e484828501610846565b91505092915050565b6000602082840312156108ff57600080fd5b600061090d8482850161085b565b91505092915050565b60006020828403121561092857600080fd5b600082015167ffffffffffffffff81111561094257600080fd5b61094e84828501610870565b91505092915050565b60006020828403121561096957600080fd5b60006109778482850161089a565b91505092915050565b60006020828403121561099257600080fd5b60006109a0848285016108af565b91505092915050565b6109b281610b84565b82525050565b6109c181610bdf565b82525050565b6109d081610c03565b82525050565b60006109e182610b68565b6109eb8185610b73565b93506109fb818560208601610c27565b610a0481610cba565b840191505092915050565b6000610a1c601783610b73565b9150610a2782610ccb565b602082019050919050565b610a3b81610bc8565b82525050565b6000602082019050610a5660008301846109a9565b92915050565b6000602082019050610a7160008301846109b8565b92915050565b6000602082019050610a8c60008301846109c7565b92915050565b60006040820190508181036000830152610aac81856109d6565b90508181036020830152610ac081846109d6565b90509392505050565b60006020820190508181036000830152610ae281610a0f565b9050919050565b6000604082019050610afe6000830185610a32565b610b0b6020830184610a32565b9392505050565b6000610b1c610b2d565b9050610b288282610c5a565b919050565b6000604051905090565b600067ffffffffffffffff821115610b5257610b51610c8b565b5b610b5b82610cba565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610b8f82610ba8565b9050919050565b6000610ba182610b84565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610bea82610bf1565b9050919050565b6000610bfc82610ba8565b9050919050565b6000610c0e82610c15565b9050919050565b6000610c2082610ba8565b9050919050565b60005b83811015610c45578082015181840152602081019050610c2a565b83811115610c54576000848401525b50505050565b610c6382610cba565b810181811067ffffffffffffffff82111715610c8257610c81610c8b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f746f6b656e20697320616c7265616479206d6170706564000000000000000000600082015250565b610cfd81610b84565b8114610d0857600080fd5b50565b610d1481610b96565b8114610d1f57600080fd5b50565b610d2b81610bc8565b8114610d3657600080fd5b50565b610d4281610bd2565b8114610d4d57600080fd5b5056fea2646970667358221220de66c9d66d46714786a429a501c5137f40324ba0c1b1c022823e97e5e3c2cf1d64736f6c63430008040033";

export class TokenRegistry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenRegistry> {
    return super.deploy(overrides || {}) as Promise<TokenRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenRegistry {
    return super.attach(address) as TokenRegistry;
  }
  connect(signer: Signer): TokenRegistry__factory {
    return super.connect(signer) as TokenRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenRegistryInterface {
    return new utils.Interface(_abi) as TokenRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenRegistry {
    return new Contract(address, _abi, signerOrProvider) as TokenRegistry;
  }
}
