/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MMRWrapper, MMRWrapperInterface } from "../MMRWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "itemHashes",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "width",
        type: "uint256",
      },
    ],
    name: "addTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "append",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    name: "appendHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rlpdata",
        type: "bytes",
      },
    ],
    name: "deserialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getMerkleProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "width",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "peakBagging",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "siblings",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610dbe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c26fe0041161005b578063c26fe004146100e3578063c41dd397146100f6578063c5d9293114610119578063de8fa4311461012c57600080fd5b80631963f2b31461008d5780632afcbdaa146100a25780635ca1e165146100b55780636b2fafa9146100d0575b600080fd5b6100a061009b3660046109b7565b610134565b005b6100a06100b03660046109b7565b6101a1565b6100bd61029c565b6040519081526020015b60405180910390f35b6100bd6100de366004610a4c565b610328565b6100a06100f1366004610a89565b6103bb565b610109610104366004610a4c565b6104d7565b6040516100c79493929190610b60565b6100a0610127366004610a4c565b61057e565b6100bd6105bd565b604051637319a76f60e11b815273__$bfd401309c0c12af44b2ca2bc99f4fadc2$__9063e6334ede9061016e906000908590600401610b9c565b60006040518083038186803b15801561018657600080fd5b505af415801561019a573d6000803e3d6000fd5b5050505050565b60006101d48260408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006101e1826105f8565b905060005b815181101561029657600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__635970e6ac909161022f85858151811061022257610222610bf9565b602002602001015161070e565b60405160e084901b6001600160e01b03191681526004810192909252602482015260440160006040518083038186803b15801561026b57600080fd5b505af415801561027f573d6000803e3d6000fd5b50505050808061028e90610c25565b9150506101e6565b50505050565b604051633148b9ef60e21b81526000600482018190529073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__9063c522e7bc906024015b60206040518083038186803b1580156102eb57600080fd5b505af41580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190610c40565b905090565b604051633170273160e01b8152600060048201819052602482018390529073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__9063317027319060440160206040518083038186803b15801561037d57600080fd5b505af4158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190610c40565b92915050565b60005b825181101561046857600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__635970e6ac90918584815181106103f7576103f7610bf9565b60200260200101516040518363ffffffff1660e01b8152600401610425929190918252602082015260400190565b60006040518083038186803b15801561043d57600080fd5b505af4158015610451573d6000803e3d6000fd5b50505050808061046090610c25565b9150506103be565b50604051637a87c5bd60e01b8152600060048201526024810182905273__$bfd401309c0c12af44b2ca2bc99f4fadc2$__90637a87c5bd9060440160006040518083038186803b1580156104bb57600080fd5b505af41580156104cf573d6000803e3d6000fd5b505050505050565b604051636d2ab7c960e11b815260006004820181905260248201839052908190606090819073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__9063da556f929060440160006040518083038186803b15801561053357600080fd5b505af4158015610547573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056f9190810190610cbf565b93509350935093509193509193565b60405163858aaa6160e01b8152600060048201526024810182905273__$bfd401309c0c12af44b2ca2bc99f4fadc2$__9063858aaa619060440161016e565b6040516324c1443960e01b81526000600482018190529073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__906324c14439906024016102d3565b606061060382610789565b61060c57600080fd5b6000610617836107c2565b905060008167ffffffffffffffff81111561063457610634610970565b60405190808252806020026020018201604052801561067957816020015b60408051808201909152600080825260208201528152602001906001900390816106525790505b509050600061068b8560200151610845565b856020015161069a9190610d36565b90506000805b84811015610703576106b1836108c7565b91506040518060400160405280838152602001848152508482815181106106da576106da610bf9565b60209081029190910101526106ef8284610d36565b9250806106fb81610c25565b9150506106a0565b509195945050505050565b80516000901580159061072357508151602110155b61072c57600080fd5b600061073b8360200151610845565b9050600081846000015161074f9190610d4e565b90506000808386602001516107649190610d36565b905080519150602083101561078057826020036101000a820491505b50949350505050565b805160009061079a57506000919050565b6020820151805160001a9060c08210156107b8575060009392505050565b5060019392505050565b80516000906107d357506000919050565b6000806107e38460200151610845565b84602001516107f29190610d36565b905060008460000151856020015161080a9190610d36565b90505b8082101561083c5761081e826108c7565b6108289083610d36565b91508261083481610c25565b93505061080d565b50909392505050565b8051600090811a608081101561085e5750600092915050565b60b8811080610879575060c08110801590610879575060f881105b156108875750600192915050565b60c08110156108bb5761089c600160b8610d65565b6108a99060ff1682610d4e565b6108b4906001610d36565b9392505050565b61089c600160f8610d65565b80516000908190811a60808110156108e25760019150610969565b60b8811015610908576108f6608082610d4e565b610901906001610d36565b9150610969565b60c08110156109355760b78103600185019450806020036101000a85510460018201810193505050610969565b60f8811015610949576108f660c082610d4e565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109af576109af610970565b604052919050565b600060208083850312156109ca57600080fd5b823567ffffffffffffffff808211156109e257600080fd5b818501915085601f8301126109f657600080fd5b813581811115610a0857610a08610970565b610a1a601f8201601f19168501610986565b91508082528684828501011115610a3057600080fd5b8084840185840137600090820190930192909252509392505050565b600060208284031215610a5e57600080fd5b5035919050565b600067ffffffffffffffff821115610a7f57610a7f610970565b5060051b60200190565b60008060408385031215610a9c57600080fd5b823567ffffffffffffffff811115610ab357600080fd5b8301601f81018513610ac457600080fd5b80356020610ad9610ad483610a65565b610986565b82815260059290921b83018101918181019088841115610af857600080fd5b938201935b83851015610b1657843582529382019390820190610afd565b98969091013596505050505050565b600081518084526020808501945080840160005b83811015610b5557815187529582019590820190600101610b39565b509495945050505050565b848152836020820152608060408201526000610b7f6080830185610b25565b8281036060840152610b918185610b25565b979650505050505050565b82815260006020604081840152835180604085015260005b81811015610bd057858101830151858201606001528201610bb4565b81811115610be2576000606083870101525b50601f01601f191692909201606001949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610c3957610c39610c0f565b5060010190565b600060208284031215610c5257600080fd5b5051919050565b600082601f830112610c6a57600080fd5b81516020610c7a610ad483610a65565b82815260059290921b84018101918181019086841115610c9957600080fd5b8286015b84811015610cb45780518352918301918301610c9d565b509695505050505050565b60008060008060808587031215610cd557600080fd5b8451935060208501519250604085015167ffffffffffffffff80821115610cfb57600080fd5b610d0788838901610c59565b93506060870151915080821115610d1d57600080fd5b50610d2a87828801610c59565b91505092959194509250565b60008219821115610d4957610d49610c0f565b500190565b600082821015610d6057610d60610c0f565b500390565b600060ff821660ff841680821015610d7f57610d7f610c0f565b9003939250505056fea26469706673582212205dbdb98a567ce8e16c5a089bdd065f306bd3b50d15b5378a765c61d92674d41364736f6c63430008090033";

type MMRWrapperConstructorParams =
  | [linkLibraryAddresses: MMRWrapperLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MMRWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MMRWrapper__factory extends ContractFactory {
  constructor(...args: MMRWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MMRWrapper__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MMRWrapperLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$bfd401309c0c12af44b2ca2bc99f4fadc2\\$__", "g"),
      linkLibraryAddresses["contracts/lib/MMR.sol:MMR"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MMRWrapper> {
    return super.deploy(overrides || {}) as Promise<MMRWrapper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MMRWrapper {
    return super.attach(address) as MMRWrapper;
  }
  connect(signer: Signer): MMRWrapper__factory {
    return super.connect(signer) as MMRWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MMRWrapperInterface {
    return new utils.Interface(_abi) as MMRWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MMRWrapper {
    return new Contract(address, _abi, signerOrProvider) as MMRWrapper;
  }
}

export interface MMRWrapperLibraryAddresses {
  ["contracts/lib/MMR.sol:MMR"]: string;
}
