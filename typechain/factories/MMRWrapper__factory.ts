/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MMRWrapper, MMRWrapperInterface } from "../MMRWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "itemHashes",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "width",
        type: "uint256",
      },
    ],
    name: "addTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "append",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    name: "appendHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rlpdata",
        type: "bytes",
      },
    ],
    name: "deserialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getMerkleProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "width",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "peakBagging",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "siblings",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506114c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c26fe0041161005b578063c26fe00414610113578063c41dd3971461012f578063c5d9293114610162578063de8fa4311461017e57610088565b80631963f2b31461008d5780632afcbdaa146100a95780635ca1e165146100c55780636b2fafa9146100e3575b600080fd5b6100a760048036038101906100a29190610eca565b61019c565b005b6100c360048036038101906100be9190610eca565b61020b565b005b6100cd610301565b6040516100da919061105e565b60405180910390f35b6100fd60048036038101906100f89190610f0b565b610391565b60405161010a919061105e565b60405180910390f35b61012d60048036038101906101289190610d91565b610425565b005b61014960048036038101906101449190610f0b565b610561565b6040516101599493929190611079565b60405180910390f35b61017c60048036038101906101779190610de5565b610607565b005b610186610676565b6040516101939190611169565b60405180910390f35b600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__63e6334ede9091836040518363ffffffff1660e01b81526004016101d8929190611110565b60006040518083038186803b1580156101f057600080fd5b505af4158015610204573d6000803e3d6000fd5b5050505050565b600061021682610706565b9050600061022382610734565b905060005b81518110156102fb57600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__635970e6ac909161029885858151811061028b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610895565b60001b6040518363ffffffff1660e01b81526004016102b89291906110e7565b60006040518083038186803b1580156102d057600080fd5b505af41580156102e4573d6000803e3d6000fd5b5050505080806102f3906113ad565b915050610228565b50505050565b60008073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__63c522e7bc90916040518263ffffffff1660e01b815260040161033c91906110cc565b60206040518083038186803b15801561035457600080fd5b505af4158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610e0e565b905090565b60008073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__63317027319091846040518363ffffffff1660e01b81526004016103ce929190611140565b60206040518083038186803b1580156103e657600080fd5b505af41580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610e0e565b9050919050565b60005b82518110156104f057600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__635970e6ac9091858481518110610488577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016104ad9291906110e7565b60006040518083038186803b1580156104c557600080fd5b505af41580156104d9573d6000803e3d6000fd5b5050505080806104e8906113ad565b915050610428565b50600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__637a87c5bd9091836040518363ffffffff1660e01b815260040161052d929190611140565b60006040518083038186803b15801561054557600080fd5b505af4158015610559573d6000803e3d6000fd5b505050505050565b600080606080600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__63da556f929091876040518363ffffffff1660e01b81526004016105a3929190611140565b60006040518083038186803b1580156105bb57600080fd5b505af41580156105cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105f89190610e37565b93509350935093509193509193565b600073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__63858aaa619091836040518363ffffffff1660e01b81526004016106439291906110e7565b60006040518083038186803b15801561065b57600080fd5b505af415801561066f573d6000803e3d6000fd5b5050505050565b60008073__$bfd401309c0c12af44b2ca2bc99f4fadc2$__6324c1443990916040518263ffffffff1660e01b81526004016106b191906110cc565b60206040518083038186803b1580156106c957600080fd5b505af41580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190610f34565b905090565b61070e610b8f565b600060208301905060405180604001604052808451815260200182815250915050919050565b606061073f82610918565b61074857600080fd5b600061075383610966565b905060008167ffffffffffffffff811115610797577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107d057816020015b6107bd610b8f565b8152602001906001900390816107b55790505b50905060006107e285602001516109f4565b85602001516107f1919061125b565b9050600080600090505b848110156108885761080c83610ab3565b915060405180604001604052808381526020018481525084828151811061085c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508183610873919061125b565b92508080610880906113ad565b9150506107fb565b5082945050505050919050565b60008082600001511180156108af57506021826000015111155b6108b857600080fd5b60006108c783602001516109f4565b905060008184600001516108db91906112b1565b90506000808386602001516108f0919061125b565b905080519150602083101561090c57826020036101000a820491505b81945050505050919050565b6000808260000151141561092f5760009050610961565b60008083602001519050805160001a915060c060ff168260ff16101561095a57600092505050610961565b6001925050505b919050565b6000808260000151141561097d57600090506109ef565b60008061098d84602001516109f4565b846020015161099c919061125b565b90506000846000015185602001516109b4919061125b565b90505b808210156109e8576109c882610ab3565b826109d3919061125b565b915082806109e0906113ad565b9350506109b7565b8293505050505b919050565b600080825160001a9050608060ff16811015610a14576000915050610aae565b60b860ff16811080610a39575060c060ff168110158015610a38575060f860ff1681105b5b15610a48576001915050610aae565b60c060ff16811015610a835760018060b8610a6391906112e5565b60ff1682610a7191906112b1565b610a7b919061125b565b915050610aae565b60018060f8610a9291906112e5565b60ff1682610aa091906112b1565b610aaa919061125b565b9150505b919050565b6000806000835160001a9050608060ff16811015610ad45760019150610b85565b60b860ff16811015610b03576001608060ff1682610af291906112b1565b610afc919061125b565b9150610b84565b60c060ff16811015610b335760b78103600185019450806020036101000a85510460018201810193505050610b83565b60f860ff16811015610b6257600160c060ff1682610b5191906112b1565b610b5b919061125b565b9150610b82565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b604051806040016040528060008152602001600081525090565b6000610bbc610bb7846111a9565b611184565b90508083825260208201905082856020860282011115610bdb57600080fd5b60005b85811015610c0b5781610bf18882610d13565b845260208401935060208301925050600181019050610bde565b5050509392505050565b6000610c28610c23846111a9565b611184565b90508083825260208201905082856020860282011115610c4757600080fd5b60005b85811015610c775781610c5d8882610d28565b845260208401935060208301925050600181019050610c4a565b5050509392505050565b6000610c94610c8f846111d5565b611184565b905082815260208101848484011115610cac57600080fd5b610cb784828561133a565b509392505050565b600082601f830112610cd057600080fd5b8135610ce0848260208601610ba9565b91505092915050565b600082601f830112610cfa57600080fd5b8151610d0a848260208601610c15565b91505092915050565b600081359050610d2281611465565b92915050565b600081519050610d3781611465565b92915050565b600082601f830112610d4e57600080fd5b8135610d5e848260208601610c81565b91505092915050565b600081359050610d768161147c565b92915050565b600081519050610d8b8161147c565b92915050565b60008060408385031215610da457600080fd5b600083013567ffffffffffffffff811115610dbe57600080fd5b610dca85828601610cbf565b9250506020610ddb85828601610d67565b9150509250929050565b600060208284031215610df757600080fd5b6000610e0584828501610d13565b91505092915050565b600060208284031215610e2057600080fd5b6000610e2e84828501610d28565b91505092915050565b60008060008060808587031215610e4d57600080fd5b6000610e5b87828801610d28565b9450506020610e6c87828801610d7c565b935050604085015167ffffffffffffffff811115610e8957600080fd5b610e9587828801610ce9565b925050606085015167ffffffffffffffff811115610eb257600080fd5b610ebe87828801610ce9565b91505092959194509250565b600060208284031215610edc57600080fd5b600082013567ffffffffffffffff811115610ef657600080fd5b610f0284828501610d3d565b91505092915050565b600060208284031215610f1d57600080fd5b6000610f2b84828501610d67565b91505092915050565b600060208284031215610f4657600080fd5b6000610f5484828501610d7c565b91505092915050565b6000610f698383610fd3565b60208301905092915050565b6000610f8082611216565b610f8a8185611239565b9350610f9583611206565b8060005b83811015610fc6578151610fad8882610f5d565b9750610fb88361122c565b925050600181019050610f99565b5085935050505092915050565b610fdc81611319565b82525050565b610feb81611319565b82525050565b610ffa81611319565b82525050565b600061100b82611221565b611015818561124a565b9350611025818560208601611349565b61102e81611454565b840191505092915050565b8082525050565b61104981611323565b82525050565b61105881611323565b82525050565b60006020820190506110736000830184610fe2565b92915050565b600060808201905061108e6000830187610fe2565b61109b6020830186611040565b81810360408301526110ad8185610f75565b905081810360608301526110c18184610f75565b905095945050505050565b60006020820190506110e16000830184611039565b92915050565b60006040820190506110fc6000830185611039565b6111096020830184610ff1565b9392505050565b60006040820190506111256000830185611039565b81810360208301526111378184611000565b90509392505050565b60006040820190506111556000830185611039565b611162602083018461104f565b9392505050565b600060208201905061117e6000830184611040565b92915050565b600061118e61119f565b905061119a828261137c565b919050565b6000604051905090565b600067ffffffffffffffff8211156111c4576111c3611425565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111f0576111ef611425565b5b6111f982611454565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061126682611323565b915061127183611323565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112a6576112a56113f6565b5b828201905092915050565b60006112bc82611323565b91506112c783611323565b9250828210156112da576112d96113f6565b5b828203905092915050565b60006112f08261132d565b91506112fb8361132d565b92508282101561130e5761130d6113f6565b5b828203905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561136757808201518184015260208101905061134c565b83811115611376576000848401525b50505050565b61138582611454565b810181811067ffffffffffffffff821117156113a4576113a3611425565b5b80604052505050565b60006113b882611323565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113eb576113ea6113f6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61146e81611319565b811461147957600080fd5b50565b61148581611323565b811461149057600080fd5b5056fea26469706673582212209c50207d6bc9bfd66bbd2de1782c705e6c337aab1275898f9d7dd78f02f0981564736f6c63430008040033";

type MMRWrapperConstructorParams =
  | [linkLibraryAddresses: MMRWrapperLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MMRWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MMRWrapper__factory extends ContractFactory {
  constructor(...args: MMRWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MMRWrapper__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MMRWrapperLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$bfd401309c0c12af44b2ca2bc99f4fadc2\\$__", "g"),
      linkLibraryAddresses["contracts/lib/MMR.sol:MMR"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MMRWrapper> {
    return super.deploy(overrides || {}) as Promise<MMRWrapper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MMRWrapper {
    return super.attach(address) as MMRWrapper;
  }
  connect(signer: Signer): MMRWrapper__factory {
    return super.connect(signer) as MMRWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MMRWrapperInterface {
    return new utils.Interface(_abi) as MMRWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MMRWrapper {
    return new Contract(address, _abi, signerOrProvider) as MMRWrapper;
  }
}

export interface MMRWrapperLibraryAddresses {
  ["contracts/lib/MMR.sol:MMR"]: string;
}
