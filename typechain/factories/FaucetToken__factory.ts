/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FaucetToken, FaucetTokenInterface } from "../FaucetToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ea1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101a2578063a457c2d7146101aa578063a9059cbb146101bd578063dd62ed3e146101d057600080fd5b806339509351146101515780634cd88b761461016457806370a082311461017957600080fd5b806306fdde03146100d4578063095ea7b3146100f25780631249c58b1461011557806318160ddd1461011d57806323b872dd1461012f578063313ce56714610142575b600080fd5b6100dc6101e3565b6040516100e99190610a2c565b60405180910390f35b610105610100366004610a98565b610275565b60405190151581526020016100e9565b61010561028f565b6035545b6040519081526020016100e9565b61010561013d366004610ac2565b6102bd565b604051601281526020016100e9565b61010561015f366004610a98565b6102e1565b610177610172366004610ba1565b610303565b005b610121610187366004610c05565b6001600160a01b031660009081526033602052604090205490565b6100dc61037c565b6101056101b8366004610a98565b61038b565b6101056101cb366004610a98565b61040b565b6101216101de366004610c27565b610419565b6060603680546101f290610c5a565b80601f016020809104026020016040519081016040528092919081815260200182805461021e90610c5a565b801561026b5780601f106102405761010080835404028352916020019161026b565b820191906000526020600020905b81548152906001019060200180831161024e57829003601f168201915b5050505050905090565b600033610283818585610444565b60019150505b92915050565b60008061029e6012600a610d8f565b90506102b5336102b083612710610d9b565b610568565b600191505090565b6000336102cb858285610648565b6102d68585856106c2565b506001949350505050565b6000336102838185856102f48383610419565b6102fe9190610dba565b610444565b600061030f6001610890565b90508015610327576000805461ff0019166101001790555b610331838361091d565b8015610377576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6060603780546101f290610c5a565b600033816103998286610419565b9050838110156103fe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102d68286868403610444565b6000336102838185856106c2565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166104a65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103f5565b6001600160a01b0382166105075760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103f5565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103f5565b80603560008282546105d09190610dba565b90915550506001600160a01b038216600090815260336020526040812080548392906105fd908490610dba565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b5050565b60006106548484610419565b905060001981146106bc57818110156106af5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103f5565b6106bc8484848403610444565b50505050565b6001600160a01b0383166107265760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103f5565b6001600160a01b0382166107885760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103f5565b6001600160a01b038316600090815260336020526040902054818110156108005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103f5565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290610837908490610dba565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161088391815260200190565b60405180910390a36106bc565b60008054610100900460ff16156108d7578160ff1660011480156108b35750303b155b6108cf5760405162461bcd60e51b81526004016103f590610dd2565b506000919050565b60005460ff8084169116106108fe5760405162461bcd60e51b81526004016103f590610dd2565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166109445760405162461bcd60e51b81526004016103f590610e20565b6106448282600054610100900460ff166109705760405162461bcd60e51b81526004016103f590610e20565b8151610983906036906020850190610993565b5080516103779060379060208401905b82805461099f90610c5a565b90600052602060002090601f0160209004810192826109c15760008555610a07565b82601f106109da57805160ff1916838001178555610a07565b82800160010185558215610a07579182015b82811115610a075782518255916020019190600101906109ec565b50610a13929150610a17565b5090565b5b80821115610a135760008155600101610a18565b600060208083528351808285015260005b81811015610a5957858101830151858201604001528201610a3d565b81811115610a6b576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461091857600080fd5b60008060408385031215610aab57600080fd5b610ab483610a81565b946020939093013593505050565b600080600060608486031215610ad757600080fd5b610ae084610a81565b9250610aee60208501610a81565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b2557600080fd5b813567ffffffffffffffff80821115610b4057610b40610afe565b604051601f8301601f19908116603f01168101908282118183101715610b6857610b68610afe565b81604052838152866020858801011115610b8157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610bb457600080fd5b823567ffffffffffffffff80821115610bcc57600080fd5b610bd886838701610b14565b93506020850135915080821115610bee57600080fd5b50610bfb85828601610b14565b9150509250929050565b600060208284031215610c1757600080fd5b610c2082610a81565b9392505050565b60008060408385031215610c3a57600080fd5b610c4383610a81565b9150610c5160208401610a81565b90509250929050565b600181811c90821680610c6e57607f821691505b60208210811415610c8f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610ce6578160001904821115610ccc57610ccc610c95565b80851615610cd957918102915b93841c9390800290610cb0565b509250929050565b600082610cfd57506001610289565b81610d0a57506000610289565b8160018114610d205760028114610d2a57610d46565b6001915050610289565b60ff841115610d3b57610d3b610c95565b50506001821b610289565b5060208310610133831016604e8410600b8410161715610d69575081810a610289565b610d738383610cab565b8060001904821115610d8757610d87610c95565b029392505050565b6000610c208383610cee565b6000816000190483118215151615610db557610db5610c95565b500290565b60008219821115610dcd57610dcd610c95565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220725415d8af3347b26d2d5cb7186c8a01015c5faaef5085c10544a4d85e228fce64736f6c63430008090033";

export class FaucetToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FaucetToken> {
    return super.deploy(overrides || {}) as Promise<FaucetToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FaucetToken {
    return super.attach(address) as FaucetToken;
  }
  connect(signer: Signer): FaucetToken__factory {
    return super.connect(signer) as FaucetToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetTokenInterface {
    return new utils.Interface(_abi) as FaucetTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FaucetToken {
    return new Contract(address, _abi, signerOrProvider) as FaucetToken;
  }
}
