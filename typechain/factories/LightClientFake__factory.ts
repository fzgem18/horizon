/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LightClientFake,
  LightClientFakeInterface,
} from "../LightClientFake";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "receiptsHash",
        type: "bytes32",
      },
    ],
    name: "VerifyReceiptsHash",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blocksByHeight",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610105806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806329e141af1460375780633c6c6b7314605f575b600080fd5b604a604236600460ae565b600192915050565b60405190151581526020015b60405180910390f35b606e606a36600460ae565b607b565b6040519081526020016056565b600082604051602001608f91815260200190565b60408051601f1981840301815291905280516020909101209392505050565b6000806040838503121560c057600080fd5b5050803592602090910135915056fea2646970667358221220430055a1234c6bee94e17ee8dd9e1a990299ed8b41d3c8d51f9436febdde103164736f6c63430008090033";

export class LightClientFake__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LightClientFake> {
    return super.deploy(overrides || {}) as Promise<LightClientFake>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LightClientFake {
    return super.attach(address) as LightClientFake;
  }
  connect(signer: Signer): LightClientFake__factory {
    return super.connect(signer) as LightClientFake__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LightClientFakeInterface {
    return new utils.Interface(_abi) as LightClientFakeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LightClientFake {
    return new Contract(address, _abi, signerOrProvider) as LightClientFake;
  }
}
