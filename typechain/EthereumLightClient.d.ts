/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EthereumLightClientInterface extends ethers.utils.Interface {
  functions: {
    "VerifyReceiptsHash(bytes32,bytes32)": FunctionFragment;
    "addBlockHeader(bytes,bytes32[4][64],bytes32[][64])": FunctionFragment;
    "blockExisting(uint256)": FunctionFragment;
    "blockHeightMax()": FunctionFragment;
    "blocks(uint256)": FunctionFragment;
    "blocksByHeight(uint256,uint256)": FunctionFragment;
    "blocksByHeightExisting(uint256)": FunctionFragment;
    "canonicalBlocks(uint256)": FunctionFragment;
    "canonicalHead()": FunctionFragment;
    "finalityConfirms()": FunctionFragment;
    "firstBlock()": FunctionFragment;
    "getBlockHeightMax()": FunctionFragment;
    "getReceiptRoot(bytes32)": FunctionFragment;
    "getStateRoot(bytes32)": FunctionFragment;
    "getTxRoot(bytes32)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "isFinalized(uint256)": FunctionFragment;
    "isVerified(uint256)": FunctionFragment;
    "longestBranchHead(uint256)": FunctionFragment;
    "numberOfBlockConfirmations(uint256)": FunctionFragment;
    "oldestBlockStored()": FunctionFragment;
    "paused()": FunctionFragment;
    "verifyEthash(bytes32,uint64,uint64,bytes32[4][64],bytes32[][64],uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "VerifyReceiptsHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlockHeader",
    values: [
      BytesLike,
      [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blockExisting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockHeightMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blocksByHeight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blocksByHeightExisting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalityConfirms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHeightMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiptRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTxRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "longestBranchHead",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBlockConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oldestBlockStored",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyEthash",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "VerifyReceiptsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockExisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockHeightMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blocksByHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocksByHeightExisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalityConfirms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "firstBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHeightMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiptRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTxRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "longestBranchHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBlockConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldestBlockStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyEthash",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class EthereumLightClient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EthereumLightClientInterface;

  functions: {
    VerifyReceiptsHash(
      blockHash: BytesLike,
      receiptsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addBlockHeader(
      _rlpHeader: BytesLike,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    blockHeightMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    blocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentHash: BigNumber;
        stateRoot: BigNumber;
        transactionsRoot: BigNumber;
        receiptsRoot: BigNumber;
        number: BigNumber;
        difficulty: BigNumber;
        totalDifficulty: BigNumber;
        time: BigNumber;
        hash: BigNumber;
      }
    >;

    blocksByHeight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blocksByHeightExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canonicalBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canonicalHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalityConfirms(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockHeightMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReceiptRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStateRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTxRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _rlpHeader: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isFinalized(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVerified(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    longestBranchHead(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberOfBlockConfirmations(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oldestBlockStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    verifyEthash(
      hash: BytesLike,
      nonce: BigNumberish,
      number: BigNumberish,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      difficulty: BigNumberish,
      mixHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  VerifyReceiptsHash(
    blockHash: BytesLike,
    receiptsHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addBlockHeader(
    _rlpHeader: BytesLike,
    cache: [
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike]
    ],
    proofs: [
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[]
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockExisting(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  blockHeightMax(overrides?: CallOverrides): Promise<BigNumber>;

  blocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      parentHash: BigNumber;
      stateRoot: BigNumber;
      transactionsRoot: BigNumber;
      receiptsRoot: BigNumber;
      number: BigNumber;
      difficulty: BigNumber;
      totalDifficulty: BigNumber;
      time: BigNumber;
      hash: BigNumber;
    }
  >;

  blocksByHeight(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blocksByHeightExisting(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canonicalBlocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canonicalHead(overrides?: CallOverrides): Promise<BigNumber>;

  finalityConfirms(overrides?: CallOverrides): Promise<BigNumber>;

  firstBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockHeightMax(overrides?: CallOverrides): Promise<BigNumber>;

  getReceiptRoot(
    blockHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getStateRoot(
    blockHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTxRoot(blockHash: BytesLike, overrides?: CallOverrides): Promise<string>;

  initialize(
    _rlpHeader: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isFinalized(
    blockHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVerified(
    blockHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  longestBranchHead(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfBlockConfirmations(
    blockHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oldestBlockStored(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  verifyEthash(
    hash: BytesLike,
    nonce: BigNumberish,
    number: BigNumberish,
    cache: [
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike]
    ],
    proofs: [
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[]
    ],
    difficulty: BigNumberish,
    mixHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    VerifyReceiptsHash(
      blockHash: BytesLike,
      receiptsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addBlockHeader(
      _rlpHeader: BytesLike,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    blockExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    blockHeightMax(overrides?: CallOverrides): Promise<BigNumber>;

    blocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        parentHash: BigNumber;
        stateRoot: BigNumber;
        transactionsRoot: BigNumber;
        receiptsRoot: BigNumber;
        number: BigNumber;
        difficulty: BigNumber;
        totalDifficulty: BigNumber;
        time: BigNumber;
        hash: BigNumber;
      }
    >;

    blocksByHeight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blocksByHeightExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canonicalBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canonicalHead(overrides?: CallOverrides): Promise<BigNumber>;

    finalityConfirms(overrides?: CallOverrides): Promise<BigNumber>;

    firstBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHeightMax(overrides?: CallOverrides): Promise<BigNumber>;

    getReceiptRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getStateRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTxRoot(blockHash: BytesLike, overrides?: CallOverrides): Promise<string>;

    initialize(_rlpHeader: BytesLike, overrides?: CallOverrides): Promise<void>;

    isFinalized(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVerified(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    longestBranchHead(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfBlockConfirmations(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oldestBlockStored(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    verifyEthash(
      hash: BytesLike,
      nonce: BigNumberish,
      number: BigNumberish,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      difficulty: BigNumberish,
      mixHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    VerifyReceiptsHash(
      blockHash: BytesLike,
      receiptsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBlockHeader(
      _rlpHeader: BytesLike,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockHeightMax(overrides?: CallOverrides): Promise<BigNumber>;

    blocks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    blocksByHeight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blocksByHeightExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canonicalBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canonicalHead(overrides?: CallOverrides): Promise<BigNumber>;

    finalityConfirms(overrides?: CallOverrides): Promise<BigNumber>;

    firstBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHeightMax(overrides?: CallOverrides): Promise<BigNumber>;

    getReceiptRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTxRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rlpHeader: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isFinalized(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVerified(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    longestBranchHead(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfBlockConfirmations(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oldestBlockStored(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    verifyEthash(
      hash: BytesLike,
      nonce: BigNumberish,
      number: BigNumberish,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      difficulty: BigNumberish,
      mixHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VerifyReceiptsHash(
      blockHash: BytesLike,
      receiptsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBlockHeader(
      _rlpHeader: BytesLike,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockHeightMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blocksByHeight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blocksByHeightExisting(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canonicalBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canonicalHead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalityConfirms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockHeightMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceiptRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTxRoot(
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rlpHeader: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isFinalized(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerified(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longestBranchHead(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfBlockConfirmations(
      blockHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldestBlockStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyEthash(
      hash: BytesLike,
      nonce: BigNumberish,
      number: BigNumberish,
      cache: [
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike],
        [BytesLike, BytesLike, BytesLike, BytesLike]
      ],
      proofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      difficulty: BigNumberish,
      mixHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
