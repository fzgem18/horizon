/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "BridgedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgedToken__factory>;
    getContractFactory(
      name: "Ethash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ethash__factory>;
    getContractFactory(
      name: "EthereumLightClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumLightClient__factory>;
    getContractFactory(
      name: "FaucetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetToken__factory>;
    getContractFactory(
      name: "HarmonyLightClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HarmonyLightClient__factory>;
    getContractFactory(
      name: "MMR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MMR__factory>;
    getContractFactory(
      name: "MMRWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MMRWrapper__factory>;
    getContractFactory(
      name: "ILightClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILightClient__factory>;
    getContractFactory(
      name: "LightClientFake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LightClientFake__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "TokenLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLocker__factory>;
    getContractFactory(
      name: "TokenLockerOnEthereum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLockerOnEthereum__factory>;
    getContractFactory(
      name: "TokenLockerOnHarmony",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLockerOnHarmony__factory>;
    getContractFactory(
      name: "TokenRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenRegistry__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "BridgedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgedToken>;
    getContractAt(
      name: "Ethash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ethash>;
    getContractAt(
      name: "EthereumLightClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumLightClient>;
    getContractAt(
      name: "FaucetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetToken>;
    getContractAt(
      name: "HarmonyLightClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HarmonyLightClient>;
    getContractAt(
      name: "MMR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MMR>;
    getContractAt(
      name: "MMRWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MMRWrapper>;
    getContractAt(
      name: "ILightClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILightClient>;
    getContractAt(
      name: "LightClientFake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LightClientFake>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "TokenLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLocker>;
    getContractAt(
      name: "TokenLockerOnEthereum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLockerOnEthereum>;
    getContractAt(
      name: "TokenLockerOnHarmony",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLockerOnHarmony>;
    getContractAt(
      name: "TokenRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
