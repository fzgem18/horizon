/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MMRWrapperInterface extends ethers.utils.Interface {
  functions: {
    "addTree(bytes32[],uint256)": FunctionFragment;
    "append(bytes)": FunctionFragment;
    "appendHash(bytes32)": FunctionFragment;
    "deserialize(bytes)": FunctionFragment;
    "getHash(uint256)": FunctionFragment;
    "getMerkleProof(uint256)": FunctionFragment;
    "getRoot()": FunctionFragment;
    "getSize()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTree",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "append", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "appendHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deserialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleProof",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "getSize", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addTree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "append", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appendHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deserialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;

  events: {};
}

export class MMRWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MMRWrapperInterface;

  functions: {
    addTree(
      itemHashes: BytesLike[],
      width: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    append(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    appendHash(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deserialize(
      rlpdata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    getMerkleProof(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string[], string[]] & {
        root: string;
        width: BigNumber;
        peakBagging: string[];
        siblings: string[];
      }
    >;

    getRoot(overrides?: CallOverrides): Promise<[string]>;

    getSize(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addTree(
    itemHashes: BytesLike[],
    width: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  append(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  appendHash(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deserialize(
    rlpdata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getMerkleProof(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string[], string[]] & {
      root: string;
      width: BigNumber;
      peakBagging: string[];
      siblings: string[];
    }
  >;

  getRoot(overrides?: CallOverrides): Promise<string>;

  getSize(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addTree(
      itemHashes: BytesLike[],
      width: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    append(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    appendHash(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    deserialize(rlpdata: BytesLike, overrides?: CallOverrides): Promise<void>;

    getHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getMerkleProof(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string[], string[]] & {
        root: string;
        width: BigNumber;
        peakBagging: string[];
        siblings: string[];
      }
    >;

    getRoot(overrides?: CallOverrides): Promise<string>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addTree(
      itemHashes: BytesLike[],
      width: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    append(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    appendHash(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deserialize(
      rlpdata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHash(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getMerkleProof(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addTree(
      itemHashes: BytesLike[],
      width: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    append(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    appendHash(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deserialize(
      rlpdata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleProof(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
