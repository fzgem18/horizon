/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenRegistryInterface extends ethers.utils.Interface {
  functions: {
    "RxMapped(address)": FunctionFragment;
    "RxMappedInv(address)": FunctionFragment;
    "RxTokens(uint256)": FunctionFragment;
    "TxMapped(address)": FunctionFragment;
    "TxMappedInv(address)": FunctionFragment;
    "TxTokens(uint256)": FunctionFragment;
    "issueTokenMapReq(address)": FunctionFragment;
    "totalBridgedTokens()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RxMapped", values: [string]): string;
  encodeFunctionData(functionFragment: "RxMappedInv", values: [string]): string;
  encodeFunctionData(
    functionFragment: "RxTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "TxMapped", values: [string]): string;
  encodeFunctionData(functionFragment: "TxMappedInv", values: [string]): string;
  encodeFunctionData(
    functionFragment: "TxTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokenMapReq",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBridgedTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "RxMapped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RxMappedInv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RxTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TxMapped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TxMappedInv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TxTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueTokenMapReq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBridgedTokens",
    data: BytesLike
  ): Result;

  events: {
    "TokenMapAck(address,address)": EventFragment;
    "TokenMapReq(address,uint8,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenMapAck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapReq"): EventFragment;
}

export type TokenMapAckEvent = TypedEvent<
  [string, string] & { tokenReq: string; tokenAck: string }
>;

export type TokenMapReqEvent = TypedEvent<
  [string, number, string, string] & {
    tokenReq: string;
    decimals: number;
    name: string;
    symbol: string;
  }
>;

export class TokenRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenRegistryInterface;

  functions: {
    RxMapped(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    TxMapped(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBridgedTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  RxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

  RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

  RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  TxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

  TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

  TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  issueTokenMapReq(
    thisSideToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBridgedTokens(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    RxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

    RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

    RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    TxMapped(arg0: string, overrides?: CallOverrides): Promise<string>;

    TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<string>;

    TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBridgedTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    "TokenMapAck(address,address)"(
      tokenReq?: string | null,
      tokenAck?: string | null
    ): TypedEventFilter<
      [string, string],
      { tokenReq: string; tokenAck: string }
    >;

    TokenMapAck(
      tokenReq?: string | null,
      tokenAck?: string | null
    ): TypedEventFilter<
      [string, string],
      { tokenReq: string; tokenAck: string }
    >;

    "TokenMapReq(address,uint8,string,string)"(
      tokenReq?: string | null,
      decimals?: BigNumberish | null,
      name?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, number, string, string],
      { tokenReq: string; decimals: number; name: string; symbol: string }
    >;

    TokenMapReq(
      tokenReq?: string | null,
      decimals?: BigNumberish | null,
      name?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, number, string, string],
      { tokenReq: string; decimals: number; name: string; symbol: string }
    >;
  };

  estimateGas: {
    RxMapped(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    RxMappedInv(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    RxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    TxMapped(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TxMappedInv(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TxTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBridgedTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    RxMapped(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RxMappedInv(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RxTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TxMapped(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TxMappedInv(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TxTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueTokenMapReq(
      thisSideToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBridgedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
